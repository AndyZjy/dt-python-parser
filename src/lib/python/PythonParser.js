// Generated from /Users/libowen/Desktop/Code/gitlab.prod.dtstack.cn/dt-insight-front/infrastructure/dt-python-parser/src/grammar/python/PythonParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PythonParserListener = require('./PythonParserListener').PythonParserListener;
var PythonParserVisitor = require('./PythonParserVisitor').PythonParserVisitor;

var PythonParserBase = require('./PythonParserBase').PythonParserBase;

var grammarFileName = "PythonParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003f\u03cc\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002",
    "|\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u0085\n\u0003\u0003\u0004\u0003",
    "\u0004\u0006\u0004\u0089\n\u0004\r\u0004\u000e\u0004\u008a\u0003\u0005",
    "\u0003\u0005\u0007\u0005\u008f\n\u0005\f\u0005\u000e\u0005\u0092\u000b",
    "\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u0096\n\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u009d\n",
    "\u0007\f\u0007\u000e\u0007\u00a0\u000b\u0007\u0003\u0007\u0005\u0007",
    "\u00a3\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u00aa\n\u0007\u0003\u0007\u0005\u0007\u00ad\n\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u00b6\n\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0006\u0007\u00bc\n\u0007\r\u0007\u000e\u0007\u00bd",
    "\u0003\u0007\u0005\u0007\u00c1\n\u0007\u0003\u0007\u0005\u0007\u00c4",
    "\n\u0007\u0003\u0007\u0005\u0007\u00c7\n\u0007\u0003\u0007\u0005\u0007",
    "\u00ca\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007",
    "\u0007\u00d0\n\u0007\f\u0007\u000e\u0007\u00d3\u000b\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00d9\n\u0007\f\u0007",
    "\u000e\u0007\u00dc\u000b\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00e0",
    "\n\u0007\u0005\u0007\u00e2\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0006",
    "\b\u00e8\n\b\r\b\u000e\b\u00e9\u0003\b\u0003\b\u0005\b\u00ee\n\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u00f4\n\t\u0003\t\u0005\t\u00f7\n",
    "\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\r\u0003\r\u0003\r\u0005\r\u010b\n\r\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0119\n\u000e",
    "\u0005\u000e\u011b\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0124\n\u000f",
    "\u0003\u000f\u0005\u000f\u0127\n\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0005\u0010\u012d\n\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0133\n\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u0138\n\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0140\n",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0145\n\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u0149\n\u0011\u0003\u0011\u0005",
    "\u0011\u014c\n\u0011\u0003\u0011\u0005\u0011\u014f\n\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u0153\n\u0011\u0005\u0011\u0155\n\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u0160\n\u0014\f\u0014\u000e",
    "\u0014\u0163\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u0168\n\u0015\u0003\u0015\u0005\u0015\u016b\n\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u0170\n\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u0175\n\u0017\f\u0017\u000e\u0017\u0178\u000b",
    "\u0017\u0003\u0017\u0005\u0017\u017b\n\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u0181\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0188\n\u0018",
    "\f\u0018\u000e\u0018\u018b\u000b\u0018\u0003\u0018\u0005\u0018\u018e",
    "\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0006\u0018",
    "\u0194\n\u0018\r\u0018\u000e\u0018\u0195\u0003\u0018\u0005\u0018\u0199",
    "\n\u0018\u0005\u0018\u019b\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u01a6\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01ae\n\u0018\u0005\u0018",
    "\u01b0\n\u0018\u0005\u0018\u01b2\n\u0018\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u01b6\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0007\u0018\u01bd\n\u0018\f\u0018\u000e\u0018\u01c0\u000b",
    "\u0018\u0003\u0018\u0003\u0018\u0006\u0018\u01c4\n\u0018\r\u0018\u000e",
    "\u0018\u01c5\u0005\u0018\u01c8\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01d1",
    "\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018",
    "\u01d7\n\u0018\f\u0018\u000e\u0018\u01da\u000b\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u01e3\n\u0018\u0005\u0018\u01e5\n\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01ed\n",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007",
    "\u0018\u01f4\n\u0018\f\u0018\u000e\u0018\u01f7\u000b\u0018\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u01fb\n\u0018\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u01ff\n\u0019\u0003\u0019\u0003\u0019\u0006\u0019\u0203\n\u0019",
    "\r\u0019\u000e\u0019\u0204\u0003\u0019\u0003\u0019\u0005\u0019\u0209",
    "\n\u0019\u0003\u0019\u0005\u0019\u020c\n\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u0215\n\u001b\f\u001b\u000e\u001b\u0218\u000b\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u021c\n\u001b\u0003\u001b\u0005\u001b\u021f\n\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u0226\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u022d\n\u001b\u0005\u001b\u022f\n\u001b\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u0234\n\u001c\f\u001c\u000e\u001c",
    "\u0237\u000b\u001c\u0003\u001c\u0005\u001c\u023a\n\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u023f\n\u001d\f\u001d\u000e\u001d",
    "\u0242\u000b\u001d\u0003\u001d\u0005\u001d\u0245\n\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u024a\n\u001e\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0007\u001f\u024f\n\u001f\f\u001f\u000e\u001f\u0252",
    "\u000b\u001f\u0003 \u0003 \u0003 \u0005 \u0257\n \u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0005!\u025f\n!\u0003!\u0003!\u0005!\u0263\n",
    "!\u0003!\u0003!\u0005!\u0267\n!\u0003\"\u0003\"\u0003\"\u0005\"\u026c",
    "\n\"\u0003\"\u0003\"\u0003\"\u0005\"\u0271\n\"\u0003\"\u0003\"\u0005",
    "\"\u0275\n\"\u0003\"\u0005\"\u0278\n\"\u0003\"\u0005\"\u027b\n\"\u0003",
    "\"\u0003\"\u0005\"\u027f\n\"\u0005\"\u0281\n\"\u0003#\u0003#\u0003#",
    "\u0007#\u0286\n#\f#\u000e#\u0289\u000b#\u0003$\u0003$\u0003$\u0005$",
    "\u028e\n$\u0003$\u0005$\u0291\n$\u0003%\u0003%\u0003%\u0003&\u0003&",
    "\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u029d\n\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u02a5\n\'\f\'\u000e\'\u02a8",
    "\u000b\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0005(\u02b6\n(\u0003(\u0003(\u0003(\u0005(\u02bb",
    "\n(\u0005(\u02bd\n(\u0003(\u0007(\u02c0\n(\f(\u000e(\u02c3\u000b(\u0003",
    ")\u0003)\u0005)\u02c7\n)\u0003)\u0003)\u0007)\u02cb\n)\f)\u000e)\u02ce",
    "\u000b)\u0003)\u0003)\u0005)\u02d2\n)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u02e9\n)\f)\u000e",
    ")\u02ec\u000b)\u0003*\u0003*\u0003*\u0005*\u02f1\n*\u0003*\u0003*\u0003",
    "*\u0005*\u02f6\n*\u0003*\u0003*\u0003*\u0005*\u02fb\n*\u0003*\u0003",
    "*\u0003*\u0003*\u0005*\u0301\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u030a\n*\u0003*\u0003*\u0003*\u0006*\u030f\n*\r*\u000e",
    "*\u0310\u0005*\u0313\n*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005",
    "+\u031b\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0324",
    "\n+\u0007+\u0326\n+\f+\u000e+\u0329\u000b+\u0003+\u0005+\u032c\n+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0334\n+\u0003,\u0003,\u0005",
    ",\u0338\n,\u0003,\u0003,\u0003,\u0003,\u0005,\u033e\n,\u0007,\u0340",
    "\n,\f,\u000e,\u0343\u000b,\u0003,\u0005,\u0346\n,\u0005,\u0348\n,\u0003",
    "-\u0003-\u0003-\u0007-\u034d\n-\f-\u000e-\u0350\u000b-\u0003-\u0005",
    "-\u0353\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u035b\n",
    ".\f.\u000e.\u035e\u000b.\u0003/\u0003/\u00030\u00030\u00030\u00050\u0365",
    "\n0\u00031\u00031\u00032\u00032\u00052\u036b\n2\u00033\u00033\u0003",
    "3\u00053\u0370\n3\u00034\u00034\u00034\u00054\u0375\n4\u00034\u0005",
    "4\u0378\n4\u00035\u00035\u00055\u037c\n5\u00035\u00035\u00035\u0003",
    "5\u00035\u00055\u0383\n5\u00036\u00036\u00036\u00076\u0388\n6\f6\u000e",
    "6\u038b\u000b6\u00036\u00056\u038e\n6\u00037\u00037\u00037\u00037\u0005",
    "7\u0394\n7\u00037\u00037\u00057\u0398\n7\u00038\u00038\u00038\u0007",
    "8\u039d\n8\f8\u000e8\u03a0\u000b8\u00038\u00058\u03a3\n8\u00039\u0003",
    "9\u00039\u00039\u00059\u03a9\n9\u00039\u00059\u03ac\n9\u00059\u03ae",
    "\n9\u00039\u00039\u00059\u03b2\n9\u00039\u00059\u03b5\n9\u00059\u03b7",
    "\n9\u0003:\u0003:\u0005:\u03bb\n:\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0005;\u03c2\n;\u0003<\u0003<\u0003<\u0003<\u0005<\u03c8\n<\u0005",
    "<\u03ca\n<\u0003<\u0002\u0006LNPZ=\u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLN",
    "PRTVXZ\\^`bdfhjlnprtv\u0002\f\u0003\u0003\u0005\u0005\u0003\u0002+,",
    "\u0003\u0002HT\u0004\u00029:>>\u0005\u0002..;=FF\u0003\u00029:\u0003",
    "\u000278\u0004\u0002)*bb\u0003\u0002VY\u0004\u0002..22\u0002\u0459\u0002",
    "{\u0003\u0002\u0002\u0002\u0004\u0084\u0003\u0002\u0002\u0002\u0006",
    "\u0088\u0003\u0002\u0002\u0002\b\u008c\u0003\u0002\u0002\u0002\n\u0095",
    "\u0003\u0002\u0002\u0002\f\u00e1\u0003\u0002\u0002\u0002\u000e\u00ed",
    "\u0003\u0002\u0002\u0002\u0010\u00ef\u0003\u0002\u0002\u0002\u0012\u00fa",
    "\u0003\u0002\u0002\u0002\u0014\u00ff\u0003\u0002\u0002\u0002\u0016\u0103",
    "\u0003\u0002\u0002\u0002\u0018\u0107\u0003\u0002\u0002\u0002\u001a\u010c",
    "\u0003\u0002\u0002\u0002\u001c\u011f\u0003\u0002\u0002\u0002\u001e\u012c",
    "\u0003\u0002\u0002\u0002 \u0154\u0003\u0002\u0002\u0002\"\u0156\u0003",
    "\u0002\u0002\u0002$\u0159\u0003\u0002\u0002\u0002&\u015c\u0003\u0002",
    "\u0002\u0002(\u016a\u0003\u0002\u0002\u0002*\u016c\u0003\u0002\u0002",
    "\u0002,\u0171\u0003\u0002\u0002\u0002.\u01fa\u0003\u0002\u0002\u0002",
    "0\u020b\u0003\u0002\u0002\u00022\u020d\u0003\u0002\u0002\u00024\u022e",
    "\u0003\u0002\u0002\u00026\u0230\u0003\u0002\u0002\u00028\u023b\u0003",
    "\u0002\u0002\u0002:\u0246\u0003\u0002\u0002\u0002<\u024b\u0003\u0002",
    "\u0002\u0002>\u0253\u0003\u0002\u0002\u0002@\u0266\u0003\u0002\u0002",
    "\u0002B\u0280\u0003\u0002\u0002\u0002D\u0282\u0003\u0002\u0002\u0002",
    "F\u0290\u0003\u0002\u0002\u0002H\u0292\u0003\u0002\u0002\u0002J\u0295",
    "\u0003\u0002\u0002\u0002L\u029c\u0003\u0002\u0002\u0002N\u02a9\u0003",
    "\u0002\u0002\u0002P\u02d1\u0003\u0002\u0002\u0002R\u0312\u0003\u0002",
    "\u0002\u0002T\u0333\u0003\u0002\u0002\u0002V\u0337\u0003\u0002\u0002",
    "\u0002X\u0349\u0003\u0002\u0002\u0002Z\u0354\u0003\u0002\u0002\u0002",
    "\\\u035f\u0003\u0002\u0002\u0002^\u0364\u0003\u0002\u0002\u0002`\u0366",
    "\u0003\u0002\u0002\u0002b\u0368\u0003\u0002\u0002\u0002d\u036f\u0003",
    "\u0002\u0002\u0002f\u0377\u0003\u0002\u0002\u0002h\u0382\u0003\u0002",
    "\u0002\u0002j\u0384\u0003\u0002\u0002\u0002l\u0397\u0003\u0002\u0002",
    "\u0002n\u0399\u0003\u0002\u0002\u0002p\u03b6\u0003\u0002\u0002\u0002",
    "r\u03b8\u0003\u0002\u0002\u0002t\u03bc\u0003\u0002\u0002\u0002v\u03c9",
    "\u0003\u0002\u0002\u0002x|\u0005\u0004\u0003\u0002y|\u0005\u0006\u0004",
    "\u0002z|\u0005\b\u0005\u0002{x\u0003\u0002\u0002\u0002{y\u0003\u0002",
    "\u0002\u0002{z\u0003\u0002\u0002\u0002{|\u0003\u0002\u0002\u0002|}\u0003",
    "\u0002\u0002\u0002}~\u0007\u0002\u0002\u0003~\u0003\u0003\u0002\u0002",
    "\u0002\u007f\u0085\u0007\u0005\u0002\u0002\u0080\u0085\u0005,\u0017",
    "\u0002\u0081\u0082\u0005\f\u0007\u0002\u0082\u0083\u0007\u0005\u0002",
    "\u0002\u0083\u0085\u0003\u0002\u0002\u0002\u0084\u007f\u0003\u0002\u0002",
    "\u0002\u0084\u0080\u0003\u0002\u0002\u0002\u0084\u0081\u0003\u0002\u0002",
    "\u0002\u0085\u0005\u0003\u0002\u0002\u0002\u0086\u0089\u0007\u0005\u0002",
    "\u0002\u0087\u0089\u0005\n\u0006\u0002\u0088\u0086\u0003\u0002\u0002",
    "\u0002\u0088\u0087\u0003\u0002\u0002\u0002\u0089\u008a\u0003\u0002\u0002",
    "\u0002\u008a\u0088\u0003\u0002\u0002\u0002\u008a\u008b\u0003\u0002\u0002",
    "\u0002\u008b\u0007\u0003\u0002\u0002\u0002\u008c\u0090\u0005X-\u0002",
    "\u008d\u008f\u0007\u0005\u0002\u0002\u008e\u008d\u0003\u0002\u0002\u0002",
    "\u008f\u0092\u0003\u0002\u0002\u0002\u0090\u008e\u0003\u0002\u0002\u0002",
    "\u0090\u0091\u0003\u0002\u0002\u0002\u0091\t\u0003\u0002\u0002\u0002",
    "\u0092\u0090\u0003\u0002\u0002\u0002\u0093\u0096\u0005,\u0017\u0002",
    "\u0094\u0096\u0005\f\u0007\u0002\u0095\u0093\u0003\u0002\u0002\u0002",
    "\u0095\u0094\u0003\u0002\u0002\u0002\u0096\u000b\u0003\u0002\u0002\u0002",
    "\u0097\u0098\u0007\u000f\u0002\u0002\u0098\u0099\u0005@!\u0002\u0099",
    "\u009a\u00070\u0002\u0002\u009a\u009e\u0005\u000e\b\u0002\u009b\u009d",
    "\u0005\u0012\n\u0002\u009c\u009b\u0003\u0002\u0002\u0002\u009d\u00a0",
    "\u0003\u0002\u0002\u0002\u009e\u009c\u0003\u0002\u0002\u0002\u009e\u009f",
    "\u0003\u0002\u0002\u0002\u009f\u00a2\u0003\u0002\u0002\u0002\u00a0\u009e",
    "\u0003\u0002\u0002\u0002\u00a1\u00a3\u0005\u0014\u000b\u0002\u00a2\u00a1",
    "\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002\u0002\u00a3\u00e2",
    "\u0003\u0002\u0002\u0002\u00a4\u00a5\u0007\u0012\u0002\u0002\u00a5\u00a6",
    "\u0005@!\u0002\u00a6\u00a7\u00070\u0002\u0002\u00a7\u00a9\u0005\u000e",
    "\b\u0002\u00a8\u00aa\u0005\u0014\u000b\u0002\u00a9\u00a8\u0003\u0002",
    "\u0002\u0002\u00a9\u00aa\u0003\u0002\u0002\u0002\u00aa\u00e2\u0003\u0002",
    "\u0002\u0002\u00ab\u00ad\u0007%\u0002\u0002\u00ac\u00ab\u0003\u0002",
    "\u0002\u0002\u00ac\u00ad\u0003\u0002\u0002\u0002\u00ad\u00ae\u0003\u0002",
    "\u0002\u0002\u00ae\u00af\u0007\u0013\u0002\u0002\u00af\u00b0\u00056",
    "\u001c\u0002\u00b0\u00b1\u0007\u0014\u0002\u0002\u00b1\u00b2\u0005X",
    "-\u0002\u00b2\u00b3\u00070\u0002\u0002\u00b3\u00b5\u0005\u000e\b\u0002",
    "\u00b4\u00b6\u0005\u0014\u000b\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002",
    "\u00b5\u00b6\u0003\u0002\u0002\u0002\u00b6\u00e2\u0003\u0002\u0002\u0002",
    "\u00b7\u00b8\u0007\u0015\u0002\u0002\u00b8\u00b9\u00070\u0002\u0002",
    "\u00b9\u00c6\u0005\u000e\b\u0002\u00ba\u00bc\u0005\u001a\u000e\u0002",
    "\u00bb\u00ba\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002",
    "\u00bd\u00bb\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002\u0002\u0002",
    "\u00be\u00c0\u0003\u0002\u0002\u0002\u00bf\u00c1\u0005\u0014\u000b\u0002",
    "\u00c0\u00bf\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002",
    "\u00c1\u00c3\u0003\u0002\u0002\u0002\u00c2\u00c4\u0005\u0016\f\u0002",
    "\u00c3\u00c2\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002",
    "\u00c4\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c7\u0005\u0016\f\u0002",
    "\u00c6\u00bb\u0003\u0002\u0002\u0002\u00c6\u00c5\u0003\u0002\u0002\u0002",
    "\u00c7\u00e2\u0003\u0002\u0002\u0002\u00c8\u00ca\u0007%\u0002\u0002",
    "\u00c9\u00c8\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002",
    "\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007\u0018\u0002\u0002",
    "\u00cc\u00d1\u0005\u0018\r\u0002\u00cd\u00ce\u0007/\u0002\u0002\u00ce",
    "\u00d0\u0005\u0018\r\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00d0",
    "\u00d3\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d1",
    "\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d4\u0003\u0002\u0002\u0002\u00d3",
    "\u00d1\u0003\u0002\u0002\u0002\u00d4\u00d5\u00070\u0002\u0002\u00d5",
    "\u00d6\u0005\u000e\b\u0002\u00d6\u00e2\u0003\u0002\u0002\u0002\u00d7",
    "\u00d9\u0005\u0010\t\u0002\u00d8\u00d7\u0003\u0002\u0002\u0002\u00d9",
    "\u00dc\u0003\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00da",
    "\u00db\u0003\u0002\u0002\u0002\u00db\u00df\u0003\u0002\u0002\u0002\u00dc",
    "\u00da\u0003\u0002\u0002\u0002\u00dd\u00e0\u0005\u001c\u000f\u0002\u00de",
    "\u00e0\u0005\u001e\u0010\u0002\u00df\u00dd\u0003\u0002\u0002\u0002\u00df",
    "\u00de\u0003\u0002\u0002\u0002\u00e0\u00e2\u0003\u0002\u0002\u0002\u00e1",
    "\u0097\u0003\u0002\u0002\u0002\u00e1\u00a4\u0003\u0002\u0002\u0002\u00e1",
    "\u00ac\u0003\u0002\u0002\u0002\u00e1\u00b7\u0003\u0002\u0002\u0002\u00e1",
    "\u00c9\u0003\u0002\u0002\u0002\u00e1\u00da\u0003\u0002\u0002\u0002\u00e2",
    "\r\u0003\u0002\u0002\u0002\u00e3\u00ee\u0005,\u0017\u0002\u00e4\u00e5",
    "\u0007\u0005\u0002\u0002\u00e5\u00e7\u0007\u0003\u0002\u0002\u00e6\u00e8",
    "\u0005\n\u0006\u0002\u00e7\u00e6\u0003\u0002\u0002\u0002\u00e8\u00e9",
    "\u0003\u0002\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ea",
    "\u0003\u0002\u0002\u0002\u00ea\u00eb\u0003\u0002\u0002\u0002\u00eb\u00ec",
    "\u0007\u0004\u0002\u0002\u00ec\u00ee\u0003\u0002\u0002\u0002\u00ed\u00e3",
    "\u0003\u0002\u0002\u0002\u00ed\u00e4\u0003\u0002\u0002\u0002\u00ee\u000f",
    "\u0003\u0002\u0002\u0002\u00ef\u00f0\u0007F\u0002\u0002\u00f0\u00f6",
    "\u0005Z.\u0002\u00f1\u00f3\u0007\\\u0002\u0002\u00f2\u00f4\u0005j6\u0002",
    "\u00f3\u00f2\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002\u0002\u0002",
    "\u00f4\u00f5\u0003\u0002\u0002\u0002\u00f5\u00f7\u0007]\u0002\u0002",
    "\u00f6\u00f1\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002",
    "\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9\u0007\u0005\u0002\u0002",
    "\u00f9\u0011\u0003\u0002\u0002\u0002\u00fa\u00fb\u0007\u0010\u0002\u0002",
    "\u00fb\u00fc\u0005@!\u0002\u00fc\u00fd\u00070\u0002\u0002\u00fd\u00fe",
    "\u0005\u000e\b\u0002\u00fe\u0013\u0003\u0002\u0002\u0002\u00ff\u0100",
    "\u0007\u0011\u0002\u0002\u0100\u0101\u00070\u0002\u0002\u0101\u0102",
    "\u0005\u000e\b\u0002\u0102\u0015\u0003\u0002\u0002\u0002\u0103\u0104",
    "\u0007\u0017\u0002\u0002\u0104\u0105\u00070\u0002\u0002\u0105\u0106",
    "\u0005\u000e\b\u0002\u0106\u0017\u0003\u0002\u0002\u0002\u0107\u010a",
    "\u0005@!\u0002\u0108\u0109\u0007\f\u0002\u0002\u0109\u010b\u0005P)\u0002",
    "\u010a\u0108\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002",
    "\u010b\u0019\u0003\u0002\u0002\u0002\u010c\u011a\u0007\u0019\u0002\u0002",
    "\u010d\u0118\u0005@!\u0002\u010e\u010f\u0006\u000e\u0002\u0002\u010f",
    "\u0110\u0007/\u0002\u0002\u0110\u0111\u0005\\/\u0002\u0111\u0112\b\u000e",
    "\u0001\u0002\u0112\u0119\u0003\u0002\u0002\u0002\u0113\u0114\u0006\u000e",
    "\u0003\u0002\u0114\u0115\u0007\f\u0002\u0002\u0115\u0116\u0005\\/\u0002",
    "\u0116\u0117\b\u000e\u0001\u0002\u0117\u0119\u0003\u0002\u0002\u0002",
    "\u0118\u010e\u0003\u0002\u0002\u0002\u0118\u0113\u0003\u0002\u0002\u0002",
    "\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u011b\u0003\u0002\u0002\u0002",
    "\u011a\u010d\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002",
    "\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u011d\u00070\u0002\u0002",
    "\u011d\u011e\u0005\u000e\b\u0002\u011e\u001b\u0003\u0002\u0002\u0002",
    "\u011f\u0120\u0007\u001f\u0002\u0002\u0120\u0126\u0005\\/\u0002\u0121",
    "\u0123\u0007\\\u0002\u0002\u0122\u0124\u0005j6\u0002\u0123\u0122\u0003",
    "\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0125\u0003",
    "\u0002\u0002\u0002\u0125\u0127\u0007]\u0002\u0002\u0126\u0121\u0003",
    "\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002\u0127\u0128\u0003",
    "\u0002\u0002\u0002\u0128\u0129\u00070\u0002\u0002\u0129\u012a\u0005",
    "\u000e\b\u0002\u012a\u001d\u0003\u0002\u0002\u0002\u012b\u012d\u0007",
    "%\u0002\u0002\u012c\u012b\u0003\u0002\u0002\u0002\u012c\u012d\u0003",
    "\u0002\u0002\u0002\u012d\u012e\u0003\u0002\u0002\u0002\u012e\u012f\u0007",
    "\u0006\u0002\u0002\u012f\u0130\u0005\\/\u0002\u0130\u0132\u0007\\\u0002",
    "\u0002\u0131\u0133\u0005 \u0011\u0002\u0132\u0131\u0003\u0002\u0002",
    "\u0002\u0132\u0133\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002",
    "\u0002\u0134\u0137\u0007]\u0002\u0002\u0135\u0136\u0007G\u0002\u0002",
    "\u0136\u0138\u0005@!\u0002\u0137\u0135\u0003\u0002\u0002\u0002\u0137",
    "\u0138\u0003\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139",
    "\u013a\u00070\u0002\u0002\u013a\u013b\u0005\u000e\b\u0002\u013b\u001f",
    "\u0003\u0002\u0002\u0002\u013c\u013d\u0005&\u0014\u0002\u013d\u013e",
    "\u0007/\u0002\u0002\u013e\u0140\u0003\u0002\u0002\u0002\u013f\u013c",
    "\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002\u0002\u0002\u0140\u014b",
    "\u0003\u0002\u0002\u0002\u0141\u0144\u0005\"\u0012\u0002\u0142\u0143",
    "\u0007/\u0002\u0002\u0143\u0145\u0005&\u0014\u0002\u0144\u0142\u0003",
    "\u0002\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0148\u0003",
    "\u0002\u0002\u0002\u0146\u0147\u0007/\u0002\u0002\u0147\u0149\u0005",
    "$\u0013\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003",
    "\u0002\u0002\u0002\u0149\u014c\u0003\u0002\u0002\u0002\u014a\u014c\u0005",
    "$\u0013\u0002\u014b\u0141\u0003\u0002\u0002\u0002\u014b\u014a\u0003",
    "\u0002\u0002\u0002\u014c\u014e\u0003\u0002\u0002\u0002\u014d\u014f\u0007",
    "/\u0002\u0002\u014e\u014d\u0003\u0002\u0002\u0002\u014e\u014f\u0003",
    "\u0002\u0002\u0002\u014f\u0155\u0003\u0002\u0002\u0002\u0150\u0152\u0005",
    "&\u0014\u0002\u0151\u0153\u0007/\u0002\u0002\u0152\u0151\u0003\u0002",
    "\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0155\u0003\u0002",
    "\u0002\u0002\u0154\u013f\u0003\u0002\u0002\u0002\u0154\u0150\u0003\u0002",
    "\u0002\u0002\u0155!\u0003\u0002\u0002\u0002\u0156\u0157\u0007.\u0002",
    "\u0002\u0157\u0158\u0005*\u0016\u0002\u0158#\u0003\u0002\u0002\u0002",
    "\u0159\u015a\u00072\u0002\u0002\u015a\u015b\u0005*\u0016\u0002\u015b",
    "%\u0003\u0002\u0002\u0002\u015c\u0161\u0005(\u0015\u0002\u015d\u015e",
    "\u0007/\u0002\u0002\u015e\u0160\u0005(\u0015\u0002\u015f\u015d\u0003",
    "\u0002\u0002\u0002\u0160\u0163\u0003\u0002\u0002\u0002\u0161\u015f\u0003",
    "\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\'\u0003",
    "\u0002\u0002\u0002\u0163\u0161\u0003\u0002\u0002\u0002\u0164\u0167\u0005",
    "*\u0016\u0002\u0165\u0166\u00073\u0002\u0002\u0166\u0168\u0005@!\u0002",
    "\u0167\u0165\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002",
    "\u0168\u016b\u0003\u0002\u0002\u0002\u0169\u016b\u0007.\u0002\u0002",
    "\u016a\u0164\u0003\u0002\u0002\u0002\u016a\u0169\u0003\u0002\u0002\u0002",
    "\u016b)\u0003\u0002\u0002\u0002\u016c\u016f\u0005\\/\u0002\u016d\u016e",
    "\u00070\u0002\u0002\u016e\u0170\u0005@!\u0002\u016f\u016d\u0003\u0002",
    "\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170+\u0003\u0002",
    "\u0002\u0002\u0171\u0176\u0005.\u0018\u0002\u0172\u0173\u00071\u0002",
    "\u0002\u0173\u0175\u0005.\u0018\u0002\u0174\u0172\u0003\u0002\u0002",
    "\u0002\u0175\u0178\u0003\u0002\u0002\u0002\u0176\u0174\u0003\u0002\u0002",
    "\u0002\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u017a\u0003\u0002\u0002",
    "\u0002\u0178\u0176\u0003\u0002\u0002\u0002\u0179\u017b\u00071\u0002",
    "\u0002\u017a\u0179\u0003\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002",
    "\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017d\t\u0002\u0002",
    "\u0002\u017d-\u0003\u0002\u0002\u0002\u017e\u0180\u00050\u0019\u0002",
    "\u017f\u0181\u00054\u001b\u0002\u0180\u017f\u0003\u0002\u0002\u0002",
    "\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u01fb\u0003\u0002\u0002\u0002",
    "\u0182\u0183\u0006\u0018\u0004\u0002\u0183\u019a\u0007\'\u0002\u0002",
    "\u0184\u0189\u0005@!\u0002\u0185\u0186\u0007/\u0002\u0002\u0186\u0188",
    "\u0005@!\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0188\u018b\u0003",
    "\u0002\u0002\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003",
    "\u0002\u0002\u0002\u018a\u018d\u0003\u0002\u0002\u0002\u018b\u0189\u0003",
    "\u0002\u0002\u0002\u018c\u018e\u0007/\u0002\u0002\u018d\u018c\u0003",
    "\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u019b\u0003",
    "\u0002\u0002\u0002\u018f\u0190\u00078\u0002\u0002\u0190\u0193\u0005",
    "@!\u0002\u0191\u0192\u0007/\u0002\u0002\u0192\u0194\u0005@!\u0002\u0193",
    "\u0191\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195",
    "\u0193\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196",
    "\u0198\u0003\u0002\u0002\u0002\u0197\u0199\u0007/\u0002\u0002\u0198",
    "\u0197\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002\u0002\u0199",
    "\u019b\u0003\u0002\u0002\u0002\u019a\u0184\u0003\u0002\u0002\u0002\u019a",
    "\u018f\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c",
    "\u019d\b\u0018\u0001\u0002\u019d\u01fb\u0003\u0002\u0002\u0002\u019e",
    "\u019f\u0007!\u0002\u0002\u019f\u01fb\u00056\u001c\u0002\u01a0\u01fb",
    "\u0007\"\u0002\u0002\u01a1\u01fb\u0007$\u0002\u0002\u01a2\u01fb\u0007",
    "#\u0002\u0002\u01a3\u01a5\u0007\u0007\u0002\u0002\u01a4\u01a6\u0005",
    "X-\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002",
    "\u0002\u0002\u01a6\u01fb\u0003\u0002\u0002\u0002\u01a7\u01b1\u0007\b",
    "\u0002\u0002\u01a8\u01af\u0005@!\u0002\u01a9\u01aa\u0007/\u0002\u0002",
    "\u01aa\u01ad\u0005@!\u0002\u01ab\u01ac\u0007/\u0002\u0002\u01ac\u01ae",
    "\u0005@!\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003",
    "\u0002\u0002\u0002\u01ae\u01b0\u0003\u0002\u0002\u0002\u01af\u01a9\u0003",
    "\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b2\u0003",
    "\u0002\u0002\u0002\u01b1\u01a8\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003",
    "\u0002\u0002\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002\u01b3\u01b4\u0007",
    "\t\u0002\u0002\u01b4\u01b6\u0005@!\u0002\u01b5\u01b3\u0003\u0002\u0002",
    "\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6\u01fb\u0003\u0002\u0002",
    "\u0002\u01b7\u01fb\u0005b2\u0002\u01b8\u01b9\u0007\n\u0002\u0002\u01b9",
    "\u01fb\u0005<\u001f\u0002\u01ba\u01c7\u0007\t\u0002\u0002\u01bb\u01bd",
    "\t\u0003\u0002\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002\u01bd\u01c0",
    "\u0003\u0002\u0002\u0002\u01be\u01bc\u0003\u0002\u0002\u0002\u01be\u01bf",
    "\u0003\u0002\u0002\u0002\u01bf\u01c1\u0003\u0002\u0002\u0002\u01c0\u01be",
    "\u0003\u0002\u0002\u0002\u01c1\u01c8\u0005Z.\u0002\u01c2\u01c4\t\u0003",
    "\u0002\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002",
    "\u0002\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002",
    "\u0002\u0002\u01c6\u01c8\u0003\u0002\u0002\u0002\u01c7\u01be\u0003\u0002",
    "\u0002\u0002\u01c7\u01c3\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002",
    "\u0002\u0002\u01c9\u01d0\u0007\n\u0002\u0002\u01ca\u01d1\u0007.\u0002",
    "\u0002\u01cb\u01cc\u0007\\\u0002\u0002\u01cc\u01cd\u00058\u001d\u0002",
    "\u01cd\u01ce\u0007]\u0002\u0002\u01ce\u01d1\u0003\u0002\u0002\u0002",
    "\u01cf\u01d1\u00058\u001d\u0002\u01d0\u01ca\u0003\u0002\u0002\u0002",
    "\u01d0\u01cb\u0003\u0002\u0002\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002",
    "\u01d1\u01fb\u0003\u0002\u0002\u0002\u01d2\u01d3\u0007\r\u0002\u0002",
    "\u01d3\u01d8\u0005\\/\u0002\u01d4\u01d5\u0007/\u0002\u0002\u01d5\u01d7",
    "\u0005\\/\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d7\u01da\u0003",
    "\u0002\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003",
    "\u0002\u0002\u0002\u01d9\u01fb\u0003\u0002\u0002\u0002\u01da\u01d8\u0003",
    "\u0002\u0002\u0002\u01db\u01dc\u0006\u0018\u0005\u0002\u01dc\u01dd\u0007",
    "(\u0002\u0002\u01dd\u01e4\u0005P)\u0002\u01de\u01df\u0007\u0014\u0002",
    "\u0002\u01df\u01e2\u0005@!\u0002\u01e0\u01e1\u0007/\u0002\u0002\u01e1",
    "\u01e3\u0005@!\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e2\u01e3",
    "\u0003\u0002\u0002\u0002\u01e3\u01e5\u0003\u0002\u0002\u0002\u01e4\u01de",
    "\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5\u01e6",
    "\u0003\u0002\u0002\u0002\u01e6\u01e7\b\u0018\u0001\u0002\u01e7\u01fb",
    "\u0003\u0002\u0002\u0002\u01e8\u01e9\u0007\u000e\u0002\u0002\u01e9\u01ec",
    "\u0005@!\u0002\u01ea\u01eb\u0007/\u0002\u0002\u01eb\u01ed\u0005@!\u0002",
    "\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002",
    "\u01ed\u01fb\u0003\u0002\u0002\u0002\u01ee\u01ef\u0006\u0018\u0006\u0002",
    "\u01ef\u01f0\u0007\u000b\u0002\u0002\u01f0\u01f5\u0005\\/\u0002\u01f1",
    "\u01f2\u0007/\u0002\u0002\u01f2\u01f4\u0005\\/\u0002\u01f3\u01f1\u0003",
    "\u0002\u0002\u0002\u01f4\u01f7\u0003\u0002\u0002\u0002\u01f5\u01f3\u0003",
    "\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f8\u0003",
    "\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f8\u01f9\b",
    "\u0018\u0001\u0002\u01f9\u01fb\u0003\u0002\u0002\u0002\u01fa\u017e\u0003",
    "\u0002\u0002\u0002\u01fa\u0182\u0003\u0002\u0002\u0002\u01fa\u019e\u0003",
    "\u0002\u0002\u0002\u01fa\u01a0\u0003\u0002\u0002\u0002\u01fa\u01a1\u0003",
    "\u0002\u0002\u0002\u01fa\u01a2\u0003\u0002\u0002\u0002\u01fa\u01a3\u0003",
    "\u0002\u0002\u0002\u01fa\u01a7\u0003\u0002\u0002\u0002\u01fa\u01b7\u0003",
    "\u0002\u0002\u0002\u01fa\u01b8\u0003\u0002\u0002\u0002\u01fa\u01ba\u0003",
    "\u0002\u0002\u0002\u01fa\u01d2\u0003\u0002\u0002\u0002\u01fa\u01db\u0003",
    "\u0002\u0002\u0002\u01fa\u01e8\u0003\u0002\u0002\u0002\u01fa\u01ee\u0003",
    "\u0002\u0002\u0002\u01fb/\u0003\u0002\u0002\u0002\u01fc\u01ff\u0005",
    "@!\u0002\u01fd\u01ff\u00052\u001a\u0002\u01fe\u01fc\u0003\u0002\u0002",
    "\u0002\u01fe\u01fd\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002",
    "\u0002\u0200\u0201\u0007/\u0002\u0002\u0201\u0203\u0003\u0002\u0002",
    "\u0002\u0202\u01fe\u0003\u0002\u0002\u0002\u0203\u0204\u0003\u0002\u0002",
    "\u0002\u0204\u0202\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002",
    "\u0002\u0205\u0208\u0003\u0002\u0002\u0002\u0206\u0209\u0005@!\u0002",
    "\u0207\u0209\u00052\u001a\u0002\u0208\u0206\u0003\u0002\u0002\u0002",
    "\u0208\u0207\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002\u0002",
    "\u0209\u020c\u0003\u0002\u0002\u0002\u020a\u020c\u0005X-\u0002\u020b",
    "\u0202\u0003\u0002\u0002\u0002\u020b\u020a\u0003\u0002\u0002\u0002\u020c",
    "1\u0003\u0002\u0002\u0002\u020d\u020e\u0007.\u0002\u0002\u020e\u020f",
    "\u0005P)\u0002\u020f3\u0003\u0002\u0002\u0002\u0210\u021e\u00073\u0002",
    "\u0002\u0211\u0216\u00050\u0019\u0002\u0212\u0213\u00073\u0002\u0002",
    "\u0213\u0215\u00050\u0019\u0002\u0214\u0212\u0003\u0002\u0002\u0002",
    "\u0215\u0218\u0003\u0002\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002",
    "\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u021b\u0003\u0002\u0002\u0002",
    "\u0218\u0216\u0003\u0002\u0002\u0002\u0219\u021a\u00073\u0002\u0002",
    "\u021a\u021c\u0005b2\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021b",
    "\u021c\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002\u0002\u0002\u021d",
    "\u021f\u0005b2\u0002\u021e\u0211\u0003\u0002\u0002\u0002\u021e\u021d",
    "\u0003\u0002\u0002\u0002\u021f\u022f\u0003\u0002\u0002\u0002\u0220\u0221",
    "\u0006\u001b\u0007\u0002\u0221\u0222\u00070\u0002\u0002\u0222\u0225",
    "\u0005@!\u0002\u0223\u0224\u00073\u0002\u0002\u0224\u0226\u0005X-\u0002",
    "\u0225\u0223\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002",
    "\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0228\b\u001b\u0001\u0002",
    "\u0228\u022f\u0003\u0002\u0002\u0002\u0229\u022c\t\u0004\u0002\u0002",
    "\u022a\u022d\u0005b2\u0002\u022b\u022d\u0005X-\u0002\u022c\u022a\u0003",
    "\u0002\u0002\u0002\u022c\u022b\u0003\u0002\u0002\u0002\u022d\u022f\u0003",
    "\u0002\u0002\u0002\u022e\u0210\u0003\u0002\u0002\u0002\u022e\u0220\u0003",
    "\u0002\u0002\u0002\u022e\u0229\u0003\u0002\u0002\u0002\u022f5\u0003",
    "\u0002\u0002\u0002\u0230\u0235\u0005P)\u0002\u0231\u0232\u0007/\u0002",
    "\u0002\u0232\u0234\u0005P)\u0002\u0233\u0231\u0003\u0002\u0002\u0002",
    "\u0234\u0237\u0003\u0002\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002",
    "\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0239\u0003\u0002\u0002\u0002",
    "\u0237\u0235\u0003\u0002\u0002\u0002\u0238\u023a\u0007/\u0002\u0002",
    "\u0239\u0238\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002",
    "\u023a7\u0003\u0002\u0002\u0002\u023b\u0240\u0005:\u001e\u0002\u023c",
    "\u023d\u0007/\u0002\u0002\u023d\u023f\u0005:\u001e\u0002\u023e\u023c",
    "\u0003\u0002\u0002\u0002\u023f\u0242\u0003\u0002\u0002\u0002\u0240\u023e",
    "\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0244",
    "\u0003\u0002\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0243\u0245",
    "\u0007/\u0002\u0002\u0244\u0243\u0003\u0002\u0002\u0002\u0244\u0245",
    "\u0003\u0002\u0002\u0002\u02459\u0003\u0002\u0002\u0002\u0246\u0249",
    "\u0005\\/\u0002\u0247\u0248\u0007\f\u0002\u0002\u0248\u024a\u0005\\",
    "/\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002",
    "\u0002\u0002\u024a;\u0003\u0002\u0002\u0002\u024b\u0250\u0005> \u0002",
    "\u024c\u024d\u0007/\u0002\u0002\u024d\u024f\u0005> \u0002\u024e\u024c",
    "\u0003\u0002\u0002\u0002\u024f\u0252\u0003\u0002\u0002\u0002\u0250\u024e",
    "\u0003\u0002\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251=",
    "\u0003\u0002\u0002\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0253\u0256",
    "\u0005Z.\u0002\u0254\u0255\u0007\f\u0002\u0002\u0255\u0257\u0005\\/",
    "\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002",
    "\u0002\u0257?\u0003\u0002\u0002\u0002\u0258\u025e\u0005L\'\u0002\u0259",
    "\u025a\u0007\u000f\u0002\u0002\u025a\u025b\u0005L\'\u0002\u025b\u025c",
    "\u0007\u0011\u0002\u0002\u025c\u025d\u0005@!\u0002\u025d\u025f\u0003",
    "\u0002\u0002\u0002\u025e\u0259\u0003\u0002\u0002\u0002\u025e\u025f\u0003",
    "\u0002\u0002\u0002\u025f\u0267\u0003\u0002\u0002\u0002\u0260\u0262\u0007",
    "\u001a\u0002\u0002\u0261\u0263\u0005B\"\u0002\u0262\u0261\u0003\u0002",
    "\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002",
    "\u0002\u0002\u0264\u0265\u00070\u0002\u0002\u0265\u0267\u0005@!\u0002",
    "\u0266\u0258\u0003\u0002\u0002\u0002\u0266\u0260\u0003\u0002\u0002\u0002",
    "\u0267A\u0003\u0002\u0002\u0002\u0268\u0269\u0005D#\u0002\u0269\u026a",
    "\u0007/\u0002\u0002\u026a\u026c\u0003\u0002\u0002\u0002\u026b\u0268",
    "\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u0277",
    "\u0003\u0002\u0002\u0002\u026d\u0270\u0005H%\u0002\u026e\u026f\u0007",
    "/\u0002\u0002\u026f\u0271\u0005D#\u0002\u0270\u026e\u0003\u0002\u0002",
    "\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0274\u0003\u0002\u0002",
    "\u0002\u0272\u0273\u0007/\u0002\u0002\u0273\u0275\u0005J&\u0002\u0274",
    "\u0272\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275",
    "\u0278\u0003\u0002\u0002\u0002\u0276\u0278\u0005J&\u0002\u0277\u026d",
    "\u0003\u0002\u0002\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u0278\u027a",
    "\u0003\u0002\u0002\u0002\u0279\u027b\u0007/\u0002\u0002\u027a\u0279",
    "\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u0281",
    "\u0003\u0002\u0002\u0002\u027c\u027e\u0005D#\u0002\u027d\u027f\u0007",
    "/\u0002\u0002\u027e\u027d\u0003\u0002\u0002\u0002\u027e\u027f\u0003",
    "\u0002\u0002\u0002\u027f\u0281\u0003\u0002\u0002\u0002\u0280\u026b\u0003",
    "\u0002\u0002\u0002\u0280\u027c\u0003\u0002\u0002\u0002\u0281C\u0003",
    "\u0002\u0002\u0002\u0282\u0287\u0005F$\u0002\u0283\u0284\u0007/\u0002",
    "\u0002\u0284\u0286\u0005F$\u0002\u0285\u0283\u0003\u0002\u0002\u0002",
    "\u0286\u0289\u0003\u0002\u0002\u0002\u0287\u0285\u0003\u0002\u0002\u0002",
    "\u0287\u0288\u0003\u0002\u0002\u0002\u0288E\u0003\u0002\u0002\u0002",
    "\u0289\u0287\u0003\u0002\u0002\u0002\u028a\u028d\u0005\\/\u0002\u028b",
    "\u028c\u00073\u0002\u0002\u028c\u028e\u0005@!\u0002\u028d\u028b\u0003",
    "\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e\u0291\u0003",
    "\u0002\u0002\u0002\u028f\u0291\u0007.\u0002\u0002\u0290\u028a\u0003",
    "\u0002\u0002\u0002\u0290\u028f\u0003\u0002\u0002\u0002\u0291G\u0003",
    "\u0002\u0002\u0002\u0292\u0293\u0007.\u0002\u0002\u0293\u0294\u0005",
    "\\/\u0002\u0294I\u0003\u0002\u0002\u0002\u0295\u0296\u00072\u0002\u0002",
    "\u0296\u0297\u0005\\/\u0002\u0297K\u0003\u0002\u0002\u0002\u0298\u0299",
    "\b\'\u0001\u0002\u0299\u029d\u0005N(\u0002\u029a\u029b\u0007\u001d\u0002",
    "\u0002\u029b\u029d\u0005L\'\u0005\u029c\u0298\u0003\u0002\u0002\u0002",
    "\u029c\u029a\u0003\u0002\u0002\u0002\u029d\u02a6\u0003\u0002\u0002\u0002",
    "\u029e\u029f\f\u0004\u0002\u0002\u029f\u02a0\u0007\u001c\u0002\u0002",
    "\u02a0\u02a5\u0005L\'\u0005\u02a1\u02a2\f\u0003\u0002\u0002\u02a2\u02a3",
    "\u0007\u001b\u0002\u0002\u02a3\u02a5\u0005L\'\u0004\u02a4\u029e\u0003",
    "\u0002\u0002\u0002\u02a4\u02a1\u0003\u0002\u0002\u0002\u02a5\u02a8\u0003",
    "\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003",
    "\u0002\u0002\u0002\u02a7M\u0003\u0002\u0002\u0002\u02a8\u02a6\u0003",
    "\u0002\u0002\u0002\u02a9\u02aa\b(\u0001\u0002\u02aa\u02ab\u0005P)\u0002",
    "\u02ab\u02c1\u0003\u0002\u0002\u0002\u02ac\u02bc\f\u0004\u0002\u0002",
    "\u02ad\u02bd\u0007?\u0002\u0002\u02ae\u02bd\u0007@\u0002\u0002\u02af",
    "\u02bd\u0007A\u0002\u0002\u02b0\u02bd\u0007B\u0002\u0002\u02b1\u02bd",
    "\u0007C\u0002\u0002\u02b2\u02bd\u0007D\u0002\u0002\u02b3\u02bd\u0007",
    "E\u0002\u0002\u02b4\u02b6\u0007\u001d\u0002\u0002\u02b5\u02b4\u0003",
    "\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003",
    "\u0002\u0002\u0002\u02b7\u02bd\u0007\u0014\u0002\u0002\u02b8\u02ba\u0007",
    "\u001e\u0002\u0002\u02b9\u02bb\u0007\u001d\u0002\u0002\u02ba\u02b9\u0003",
    "\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bd\u0003",
    "\u0002\u0002\u0002\u02bc\u02ad\u0003\u0002\u0002\u0002\u02bc\u02ae\u0003",
    "\u0002\u0002\u0002\u02bc\u02af\u0003\u0002\u0002\u0002\u02bc\u02b0\u0003",
    "\u0002\u0002\u0002\u02bc\u02b1\u0003\u0002\u0002\u0002\u02bc\u02b2\u0003",
    "\u0002\u0002\u0002\u02bc\u02b3\u0003\u0002\u0002\u0002\u02bc\u02b5\u0003",
    "\u0002\u0002\u0002\u02bc\u02b8\u0003\u0002\u0002\u0002\u02bd\u02be\u0003",
    "\u0002\u0002\u0002\u02be\u02c0\u0005N(\u0005\u02bf\u02ac\u0003\u0002",
    "\u0002\u0002\u02c0\u02c3\u0003\u0002\u0002\u0002\u02c1\u02bf\u0003\u0002",
    "\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2O\u0003\u0002",
    "\u0002\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002\u02c4\u02c6\b)\u0001",
    "\u0002\u02c5\u02c7\u0007&\u0002\u0002\u02c6\u02c5\u0003\u0002\u0002",
    "\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002",
    "\u0002\u02c8\u02cc\u0005R*\u0002\u02c9\u02cb\u0005f4\u0002\u02ca\u02c9",
    "\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002\u02cc\u02ca",
    "\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd\u02d2",
    "\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02cf\u02d0",
    "\t\u0005\u0002\u0002\u02d0\u02d2\u0005P)\t\u02d1\u02c4\u0003\u0002\u0002",
    "\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d2\u02ea\u0003\u0002\u0002",
    "\u0002\u02d3\u02d4\f\n\u0002\u0002\u02d4\u02d5\u00072\u0002\u0002\u02d5",
    "\u02e9\u0005P)\n\u02d6\u02d7\f\b\u0002\u0002\u02d7\u02d8\t\u0006\u0002",
    "\u0002\u02d8\u02e9\u0005P)\t\u02d9\u02da\f\u0007\u0002\u0002\u02da\u02db",
    "\t\u0007\u0002\u0002\u02db\u02e9\u0005P)\b\u02dc\u02dd\f\u0006\u0002",
    "\u0002\u02dd\u02de\t\b\u0002\u0002\u02de\u02e9\u0005P)\u0007\u02df\u02e0",
    "\f\u0005\u0002\u0002\u02e0\u02e1\u00076\u0002\u0002\u02e1\u02e9\u0005",
    "P)\u0006\u02e2\u02e3\f\u0004\u0002\u0002\u02e3\u02e4\u00075\u0002\u0002",
    "\u02e4\u02e9\u0005P)\u0005\u02e5\u02e6\f\u0003\u0002\u0002\u02e6\u02e7",
    "\u00074\u0002\u0002\u02e7\u02e9\u0005P)\u0004\u02e8\u02d3\u0003\u0002",
    "\u0002\u0002\u02e8\u02d6\u0003\u0002\u0002\u0002\u02e8\u02d9\u0003\u0002",
    "\u0002\u0002\u02e8\u02dc\u0003\u0002\u0002\u0002\u02e8\u02df\u0003\u0002",
    "\u0002\u0002\u02e8\u02e2\u0003\u0002\u0002\u0002\u02e8\u02e5\u0003\u0002",
    "\u0002\u0002\u02e9\u02ec\u0003\u0002\u0002\u0002\u02ea\u02e8\u0003\u0002",
    "\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02ebQ\u0003\u0002",
    "\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ed\u02f0\u0007\\",
    "\u0002\u0002\u02ee\u02f1\u0005b2\u0002\u02ef\u02f1\u0005V,\u0002\u02f0",
    "\u02ee\u0003\u0002\u0002\u0002\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f0",
    "\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2",
    "\u0313\u0007]\u0002\u0002\u02f3\u02f5\u0007`\u0002\u0002\u02f4\u02f6",
    "\u0005V,\u0002\u02f5\u02f4\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003",
    "\u0002\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002\u0002\u02f7\u0313\u0007",
    "a\u0002\u0002\u02f8\u02fa\u0007^\u0002\u0002\u02f9\u02fb\u0005T+\u0002",
    "\u02fa\u02f9\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002",
    "\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u0313\u0007_\u0002\u0002",
    "\u02fd\u02fe\u0007-\u0002\u0002\u02fe\u0300\u0005X-\u0002\u02ff\u0301",
    "\u0007/\u0002\u0002\u0300\u02ff\u0003\u0002\u0002\u0002\u0300\u0301",
    "\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302\u0303",
    "\u0007-\u0002\u0002\u0303\u0313\u0003\u0002\u0002\u0002\u0304\u0313",
    "\u0007,\u0002\u0002\u0305\u0313\u0005\\/\u0002\u0306\u0313\u0007\'\u0002",
    "\u0002\u0307\u0313\u0007(\u0002\u0002\u0308\u030a\u0007:\u0002\u0002",
    "\u0309\u0308\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002",
    "\u030a\u030b\u0003\u0002\u0002\u0002\u030b\u0313\u0005^0\u0002\u030c",
    "\u0313\u0007\u0016\u0002\u0002\u030d\u030f\u0007U\u0002\u0002\u030e",
    "\u030d\u0003\u0002\u0002\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310",
    "\u030e\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311",
    "\u0313\u0003\u0002\u0002\u0002\u0312\u02ed\u0003\u0002\u0002\u0002\u0312",
    "\u02f3\u0003\u0002\u0002\u0002\u0312\u02f8\u0003\u0002\u0002\u0002\u0312",
    "\u02fd\u0003\u0002\u0002\u0002\u0312\u0304\u0003\u0002\u0002\u0002\u0312",
    "\u0305\u0003\u0002\u0002\u0002\u0312\u0306\u0003\u0002\u0002\u0002\u0312",
    "\u0307\u0003\u0002\u0002\u0002\u0312\u0309\u0003\u0002\u0002\u0002\u0312",
    "\u030c\u0003\u0002\u0002\u0002\u0312\u030e\u0003\u0002\u0002\u0002\u0313",
    "S\u0003\u0002\u0002\u0002\u0314\u0315\u0005@!\u0002\u0315\u0316\u0007",
    "0\u0002\u0002\u0316\u0317\u0005@!\u0002\u0317\u031b\u0003\u0002\u0002",
    "\u0002\u0318\u0319\u00072\u0002\u0002\u0319\u031b\u0005P)\u0002\u031a",
    "\u0314\u0003\u0002\u0002\u0002\u031a\u0318\u0003\u0002\u0002\u0002\u031b",
    "\u0327\u0003\u0002\u0002\u0002\u031c\u0323\u0007/\u0002\u0002\u031d",
    "\u031e\u0005@!\u0002\u031e\u031f\u00070\u0002\u0002\u031f\u0320\u0005",
    "@!\u0002\u0320\u0324\u0003\u0002\u0002\u0002\u0321\u0322\u00072\u0002",
    "\u0002\u0322\u0324\u0005P)\u0002\u0323\u031d\u0003\u0002\u0002\u0002",
    "\u0323\u0321\u0003\u0002\u0002\u0002\u0324\u0326\u0003\u0002\u0002\u0002",
    "\u0325\u031c\u0003\u0002\u0002\u0002\u0326\u0329\u0003\u0002\u0002\u0002",
    "\u0327\u0325\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002",
    "\u0328\u032b\u0003\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002",
    "\u032a\u032c\u0007/\u0002\u0002\u032b\u032a\u0003\u0002\u0002\u0002",
    "\u032b\u032c\u0003\u0002\u0002\u0002\u032c\u0334\u0003\u0002\u0002\u0002",
    "\u032d\u032e\u0005@!\u0002\u032e\u032f\u00070\u0002\u0002\u032f\u0330",
    "\u0005@!\u0002\u0330\u0331\u0005t;\u0002\u0331\u0334\u0003\u0002\u0002",
    "\u0002\u0332\u0334\u0005V,\u0002\u0333\u031a\u0003\u0002\u0002\u0002",
    "\u0333\u032d\u0003\u0002\u0002\u0002\u0333\u0332\u0003\u0002\u0002\u0002",
    "\u0334U\u0003\u0002\u0002\u0002\u0335\u0338\u0005@!\u0002\u0336\u0338",
    "\u00052\u001a\u0002\u0337\u0335\u0003\u0002\u0002\u0002\u0337\u0336",
    "\u0003\u0002\u0002\u0002\u0338\u0347\u0003\u0002\u0002\u0002\u0339\u0348",
    "\u0005t;\u0002\u033a\u033d\u0007/\u0002\u0002\u033b\u033e\u0005@!\u0002",
    "\u033c\u033e\u00052\u001a\u0002\u033d\u033b\u0003\u0002\u0002\u0002",
    "\u033d\u033c\u0003\u0002\u0002\u0002\u033e\u0340\u0003\u0002\u0002\u0002",
    "\u033f\u033a\u0003\u0002\u0002\u0002\u0340\u0343\u0003\u0002\u0002\u0002",
    "\u0341\u033f\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002\u0002",
    "\u0342\u0345\u0003\u0002\u0002\u0002\u0343\u0341\u0003\u0002\u0002\u0002",
    "\u0344\u0346\u0007/\u0002\u0002\u0345\u0344\u0003\u0002\u0002\u0002",
    "\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0348\u0003\u0002\u0002\u0002",
    "\u0347\u0339\u0003\u0002\u0002\u0002\u0347\u0341\u0003\u0002\u0002\u0002",
    "\u0348W\u0003\u0002\u0002\u0002\u0349\u034e\u0005@!\u0002\u034a\u034b",
    "\u0007/\u0002\u0002\u034b\u034d\u0005@!\u0002\u034c\u034a\u0003\u0002",
    "\u0002\u0002\u034d\u0350\u0003\u0002\u0002\u0002\u034e\u034c\u0003\u0002",
    "\u0002\u0002\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0352\u0003\u0002",
    "\u0002\u0002\u0350\u034e\u0003\u0002\u0002\u0002\u0351\u0353\u0007/",
    "\u0002\u0002\u0352\u0351\u0003\u0002\u0002\u0002\u0352\u0353\u0003\u0002",
    "\u0002\u0002\u0353Y\u0003\u0002\u0002\u0002\u0354\u0355\b.\u0001\u0002",
    "\u0355\u0356\u0005\\/\u0002\u0356\u035c\u0003\u0002\u0002\u0002\u0357",
    "\u0358\f\u0004\u0002\u0002\u0358\u0359\u0007+\u0002\u0002\u0359\u035b",
    "\u0005\\/\u0002\u035a\u0357\u0003\u0002\u0002\u0002\u035b\u035e\u0003",
    "\u0002\u0002\u0002\u035c\u035a\u0003\u0002\u0002\u0002\u035c\u035d\u0003",
    "\u0002\u0002\u0002\u035d[\u0003\u0002\u0002\u0002\u035e\u035c\u0003",
    "\u0002\u0002\u0002\u035f\u0360\t\t\u0002\u0002\u0360]\u0003\u0002\u0002",
    "\u0002\u0361\u0365\u0005`1\u0002\u0362\u0365\u0007Z\u0002\u0002\u0363",
    "\u0365\u0007[\u0002\u0002\u0364\u0361\u0003\u0002\u0002\u0002\u0364",
    "\u0362\u0003\u0002\u0002\u0002\u0364\u0363\u0003\u0002\u0002\u0002\u0365",
    "_\u0003\u0002\u0002\u0002\u0366\u0367\t\n\u0002\u0002\u0367a\u0003\u0002",
    "\u0002\u0002\u0368\u036a\u0007 \u0002\u0002\u0369\u036b\u0005d3\u0002",
    "\u036a\u0369\u0003\u0002\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002",
    "\u036bc\u0003\u0002\u0002\u0002\u036c\u036d\u0007\t\u0002\u0002\u036d",
    "\u0370\u0005@!\u0002\u036e\u0370\u0005X-\u0002\u036f\u036c\u0003\u0002",
    "\u0002\u0002\u036f\u036e\u0003\u0002\u0002\u0002\u0370e\u0003\u0002",
    "\u0002\u0002\u0371\u0372\u0007+\u0002\u0002\u0372\u0374\u0005\\/\u0002",
    "\u0373\u0375\u0005h5\u0002\u0374\u0373\u0003\u0002\u0002\u0002\u0374",
    "\u0375\u0003\u0002\u0002\u0002\u0375\u0378\u0003\u0002\u0002\u0002\u0376",
    "\u0378\u0005h5\u0002\u0377\u0371\u0003\u0002\u0002\u0002\u0377\u0376",
    "\u0003\u0002\u0002\u0002\u0378g\u0003\u0002\u0002\u0002\u0379\u037b",
    "\u0007\\\u0002\u0002\u037a\u037c\u0005j6\u0002\u037b\u037a\u0003\u0002",
    "\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002",
    "\u0002\u0002\u037d\u0383\u0007]\u0002\u0002\u037e\u037f\u0007`\u0002",
    "\u0002\u037f\u0380\u0005n8\u0002\u0380\u0381\u0007a\u0002\u0002\u0381",
    "\u0383\u0003\u0002\u0002\u0002\u0382\u0379\u0003\u0002\u0002\u0002\u0382",
    "\u037e\u0003\u0002\u0002\u0002\u0383i\u0003\u0002\u0002\u0002\u0384",
    "\u0389\u0005l7\u0002\u0385\u0386\u0007/\u0002\u0002\u0386\u0388\u0005",
    "l7\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0388\u038b\u0003\u0002",
    "\u0002\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u0389\u038a\u0003\u0002",
    "\u0002\u0002\u038a\u038d\u0003\u0002\u0002\u0002\u038b\u0389\u0003\u0002",
    "\u0002\u0002\u038c\u038e\u0007/\u0002\u0002\u038d\u038c\u0003\u0002",
    "\u0002\u0002\u038d\u038e\u0003\u0002\u0002\u0002\u038ek\u0003\u0002",
    "\u0002\u0002\u038f\u0393\u0005@!\u0002\u0390\u0394\u0005t;\u0002\u0391",
    "\u0392\u00073\u0002\u0002\u0392\u0394\u0005@!\u0002\u0393\u0390\u0003",
    "\u0002\u0002\u0002\u0393\u0391\u0003\u0002\u0002\u0002\u0393\u0394\u0003",
    "\u0002\u0002\u0002\u0394\u0398\u0003\u0002\u0002\u0002\u0395\u0396\t",
    "\u000b\u0002\u0002\u0396\u0398\u0005@!\u0002\u0397\u038f\u0003\u0002",
    "\u0002\u0002\u0397\u0395\u0003\u0002\u0002\u0002\u0398m\u0003\u0002",
    "\u0002\u0002\u0399\u039e\u0005p9\u0002\u039a\u039b\u0007/\u0002\u0002",
    "\u039b\u039d\u0005p9\u0002\u039c\u039a\u0003\u0002\u0002\u0002\u039d",
    "\u03a0\u0003\u0002\u0002\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039e",
    "\u039f\u0003\u0002\u0002\u0002\u039f\u03a2\u0003\u0002\u0002\u0002\u03a0",
    "\u039e\u0003\u0002\u0002\u0002\u03a1\u03a3\u0007/\u0002\u0002\u03a2",
    "\u03a1\u0003\u0002\u0002\u0002\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3",
    "o\u0003\u0002\u0002\u0002\u03a4\u03b7\u0007,\u0002\u0002\u03a5\u03ad",
    "\u0005@!\u0002\u03a6\u03a8\u00070\u0002\u0002\u03a7\u03a9\u0005@!\u0002",
    "\u03a8\u03a7\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002",
    "\u03a9\u03ab\u0003\u0002\u0002\u0002\u03aa\u03ac\u0005r:\u0002\u03ab",
    "\u03aa\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac",
    "\u03ae\u0003\u0002\u0002\u0002\u03ad\u03a6\u0003\u0002\u0002\u0002\u03ad",
    "\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b7\u0003\u0002\u0002\u0002\u03af",
    "\u03b1\u00070\u0002\u0002\u03b0\u03b2\u0005@!\u0002\u03b1\u03b0\u0003",
    "\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b4\u0003",
    "\u0002\u0002\u0002\u03b3\u03b5\u0005r:\u0002\u03b4\u03b3\u0003\u0002",
    "\u0002\u0002\u03b4\u03b5\u0003\u0002\u0002\u0002\u03b5\u03b7\u0003\u0002",
    "\u0002\u0002\u03b6\u03a4\u0003\u0002\u0002\u0002\u03b6\u03a5\u0003\u0002",
    "\u0002\u0002\u03b6\u03af\u0003\u0002\u0002\u0002\u03b7q\u0003\u0002",
    "\u0002\u0002\u03b8\u03ba\u00070\u0002\u0002\u03b9\u03bb\u0005@!\u0002",
    "\u03ba\u03b9\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002",
    "\u03bbs\u0003\u0002\u0002\u0002\u03bc\u03bd\u0007\u0013\u0002\u0002",
    "\u03bd\u03be\u00056\u001c\u0002\u03be\u03bf\u0007\u0014\u0002\u0002",
    "\u03bf\u03c1\u0005L\'\u0002\u03c0\u03c2\u0005v<\u0002\u03c1\u03c0\u0003",
    "\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2u\u0003",
    "\u0002\u0002\u0002\u03c3\u03ca\u0005t;\u0002\u03c4\u03c5\u0007\u000f",
    "\u0002\u0002\u03c5\u03c7\u0005@!\u0002\u03c6\u03c8\u0005v<\u0002\u03c7",
    "\u03c6\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8",
    "\u03ca\u0003\u0002\u0002\u0002\u03c9\u03c3\u0003\u0002\u0002\u0002\u03c9",
    "\u03c4\u0003\u0002\u0002\u0002\u03caw\u0003\u0002\u0002\u0002\u0099",
    "{\u0084\u0088\u008a\u0090\u0095\u009e\u00a2\u00a9\u00ac\u00b5\u00bd",
    "\u00c0\u00c3\u00c6\u00c9\u00d1\u00da\u00df\u00e1\u00e9\u00ed\u00f3\u00f6",
    "\u010a\u0118\u011a\u0123\u0126\u012c\u0132\u0137\u013f\u0144\u0148\u014b",
    "\u014e\u0152\u0154\u0161\u0167\u016a\u016f\u0176\u017a\u0180\u0189\u018d",
    "\u0195\u0198\u019a\u01a5\u01ad\u01af\u01b1\u01b5\u01be\u01c5\u01c7\u01d0",
    "\u01d8\u01e2\u01e4\u01ec\u01f5\u01fa\u01fe\u0204\u0208\u020b\u0216\u021b",
    "\u021e\u0225\u022c\u022e\u0235\u0239\u0240\u0244\u0249\u0250\u0256\u025e",
    "\u0262\u0266\u026b\u0270\u0274\u0277\u027a\u027e\u0280\u0287\u028d\u0290",
    "\u029c\u02a4\u02a6\u02b5\u02ba\u02bc\u02c1\u02c6\u02cc\u02d1\u02e8\u02ea",
    "\u02f0\u02f5\u02fa\u0300\u0309\u0310\u0312\u031a\u0323\u0327\u032b\u0333",
    "\u0337\u033d\u0341\u0345\u0347\u034e\u0352\u035c\u0364\u036a\u036f\u0374",
    "\u0377\u037b\u0382\u0389\u038d\u0393\u0397\u039e\u03a2\u03a8\u03ab\u03ad",
    "\u03b1\u03b4\u03b6\u03ba\u03c1\u03c7\u03c9"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, "'def'", "'return'", "'raise'", 
                     "'from'", "'import'", "'nonlocal'", "'as'", "'global'", 
                     "'assert'", "'if'", "'elif'", "'else'", "'while'", 
                     "'for'", "'in'", "'try'", "'None'", "'finally'", "'with'", 
                     "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", 
                     "'class'", "'yield'", "'del'", "'pass'", "'continue'", 
                     "'break'", "'async'", "'await'", "'print'", "'exec'", 
                     "'True'", "'False'", "'.'", "'...'", "'`'", "'*'", 
                     "','", "':'", "';'", "'**'", "'='", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", 
                     "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", 
                     "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
                     "'**='", "'//='", null, null, null, null, null, null, 
                     null, "'('", "')'", "'{'", "'}'", "'['", "']'" ];

var symbolicNames = [ null, "INDENT", "DEDENT", "LINE_BREAK", "DEF", "RETURN", 
                      "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", "GLOBAL", 
                      "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                      "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", "LAMBDA", 
                      "OR", "AND", "NOT", "IS", "CLASS", "YIELD", "DEL", 
                      "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", "PRINT", 
                      "EXEC", "TRUE", "FALSE", "DOT", "ELLIPSIS", "REVERSE_QUOTE", 
                      "STAR", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "LESS_THAN", 
                      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", 
                      "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                      "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                      "STRING", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
                      "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
                      "CLOSE_BRACKET", "NAME", "LINE_JOIN", "NEWLINE", "WS", 
                      "COMMENT" ];

var ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "compound_stmt", "suite", "decorator", "elif_clause", 
                   "else_clause", "finally_clause", "with_item", "except_clause", 
                   "classdef", "funcdef", "typedargslist", "args", "kwargs", 
                   "def_parameters", "def_parameter", "named_parameter", 
                   "simple_stmt", "small_stmt", "testlist_star_expr", "star_expr", 
                   "assign_part", "exprlist", "import_as_names", "import_as_name", 
                   "dotted_as_names", "dotted_as_name", "test", "varargslist", 
                   "vardef_parameters", "vardef_parameter", "varargs", "varkwargs", 
                   "logical_test", "comparison", "expr", "atom", "dictorsetmaker", 
                   "testlist_comp", "testlist", "dotted_name", "name", "number", 
                   "integer", "yield_expr", "yield_arg", "trailer", "arguments", 
                   "arglist", "argument", "subscriptlist", "subscript", 
                   "sliceop", "comp_for", "comp_iter" ];

function PythonParser (input) {
	PythonParserBase.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PythonParser.prototype = Object.create(PythonParserBase.prototype);
PythonParser.prototype.constructor = PythonParser;

Object.defineProperty(PythonParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PythonParser.EOF = antlr4.Token.EOF;
PythonParser.INDENT = 1;
PythonParser.DEDENT = 2;
PythonParser.LINE_BREAK = 3;
PythonParser.DEF = 4;
PythonParser.RETURN = 5;
PythonParser.RAISE = 6;
PythonParser.FROM = 7;
PythonParser.IMPORT = 8;
PythonParser.NONLOCAL = 9;
PythonParser.AS = 10;
PythonParser.GLOBAL = 11;
PythonParser.ASSERT = 12;
PythonParser.IF = 13;
PythonParser.ELIF = 14;
PythonParser.ELSE = 15;
PythonParser.WHILE = 16;
PythonParser.FOR = 17;
PythonParser.IN = 18;
PythonParser.TRY = 19;
PythonParser.NONE = 20;
PythonParser.FINALLY = 21;
PythonParser.WITH = 22;
PythonParser.EXCEPT = 23;
PythonParser.LAMBDA = 24;
PythonParser.OR = 25;
PythonParser.AND = 26;
PythonParser.NOT = 27;
PythonParser.IS = 28;
PythonParser.CLASS = 29;
PythonParser.YIELD = 30;
PythonParser.DEL = 31;
PythonParser.PASS = 32;
PythonParser.CONTINUE = 33;
PythonParser.BREAK = 34;
PythonParser.ASYNC = 35;
PythonParser.AWAIT = 36;
PythonParser.PRINT = 37;
PythonParser.EXEC = 38;
PythonParser.TRUE = 39;
PythonParser.FALSE = 40;
PythonParser.DOT = 41;
PythonParser.ELLIPSIS = 42;
PythonParser.REVERSE_QUOTE = 43;
PythonParser.STAR = 44;
PythonParser.COMMA = 45;
PythonParser.COLON = 46;
PythonParser.SEMI_COLON = 47;
PythonParser.POWER = 48;
PythonParser.ASSIGN = 49;
PythonParser.OR_OP = 50;
PythonParser.XOR = 51;
PythonParser.AND_OP = 52;
PythonParser.LEFT_SHIFT = 53;
PythonParser.RIGHT_SHIFT = 54;
PythonParser.ADD = 55;
PythonParser.MINUS = 56;
PythonParser.DIV = 57;
PythonParser.MOD = 58;
PythonParser.IDIV = 59;
PythonParser.NOT_OP = 60;
PythonParser.LESS_THAN = 61;
PythonParser.GREATER_THAN = 62;
PythonParser.EQUALS = 63;
PythonParser.GT_EQ = 64;
PythonParser.LT_EQ = 65;
PythonParser.NOT_EQ_1 = 66;
PythonParser.NOT_EQ_2 = 67;
PythonParser.AT = 68;
PythonParser.ARROW = 69;
PythonParser.ADD_ASSIGN = 70;
PythonParser.SUB_ASSIGN = 71;
PythonParser.MULT_ASSIGN = 72;
PythonParser.AT_ASSIGN = 73;
PythonParser.DIV_ASSIGN = 74;
PythonParser.MOD_ASSIGN = 75;
PythonParser.AND_ASSIGN = 76;
PythonParser.OR_ASSIGN = 77;
PythonParser.XOR_ASSIGN = 78;
PythonParser.LEFT_SHIFT_ASSIGN = 79;
PythonParser.RIGHT_SHIFT_ASSIGN = 80;
PythonParser.POWER_ASSIGN = 81;
PythonParser.IDIV_ASSIGN = 82;
PythonParser.STRING = 83;
PythonParser.DECIMAL_INTEGER = 84;
PythonParser.OCT_INTEGER = 85;
PythonParser.HEX_INTEGER = 86;
PythonParser.BIN_INTEGER = 87;
PythonParser.IMAG_NUMBER = 88;
PythonParser.FLOAT_NUMBER = 89;
PythonParser.OPEN_PAREN = 90;
PythonParser.CLOSE_PAREN = 91;
PythonParser.OPEN_BRACE = 92;
PythonParser.CLOSE_BRACE = 93;
PythonParser.OPEN_BRACKET = 94;
PythonParser.CLOSE_BRACKET = 95;
PythonParser.NAME = 96;
PythonParser.LINE_JOIN = 97;
PythonParser.NEWLINE = 98;
PythonParser.WS = 99;
PythonParser.COMMENT = 100;

PythonParser.RULE_root = 0;
PythonParser.RULE_single_input = 1;
PythonParser.RULE_file_input = 2;
PythonParser.RULE_eval_input = 3;
PythonParser.RULE_stmt = 4;
PythonParser.RULE_compound_stmt = 5;
PythonParser.RULE_suite = 6;
PythonParser.RULE_decorator = 7;
PythonParser.RULE_elif_clause = 8;
PythonParser.RULE_else_clause = 9;
PythonParser.RULE_finally_clause = 10;
PythonParser.RULE_with_item = 11;
PythonParser.RULE_except_clause = 12;
PythonParser.RULE_classdef = 13;
PythonParser.RULE_funcdef = 14;
PythonParser.RULE_typedargslist = 15;
PythonParser.RULE_args = 16;
PythonParser.RULE_kwargs = 17;
PythonParser.RULE_def_parameters = 18;
PythonParser.RULE_def_parameter = 19;
PythonParser.RULE_named_parameter = 20;
PythonParser.RULE_simple_stmt = 21;
PythonParser.RULE_small_stmt = 22;
PythonParser.RULE_testlist_star_expr = 23;
PythonParser.RULE_star_expr = 24;
PythonParser.RULE_assign_part = 25;
PythonParser.RULE_exprlist = 26;
PythonParser.RULE_import_as_names = 27;
PythonParser.RULE_import_as_name = 28;
PythonParser.RULE_dotted_as_names = 29;
PythonParser.RULE_dotted_as_name = 30;
PythonParser.RULE_test = 31;
PythonParser.RULE_varargslist = 32;
PythonParser.RULE_vardef_parameters = 33;
PythonParser.RULE_vardef_parameter = 34;
PythonParser.RULE_varargs = 35;
PythonParser.RULE_varkwargs = 36;
PythonParser.RULE_logical_test = 37;
PythonParser.RULE_comparison = 38;
PythonParser.RULE_expr = 39;
PythonParser.RULE_atom = 40;
PythonParser.RULE_dictorsetmaker = 41;
PythonParser.RULE_testlist_comp = 42;
PythonParser.RULE_testlist = 43;
PythonParser.RULE_dotted_name = 44;
PythonParser.RULE_name = 45;
PythonParser.RULE_number = 46;
PythonParser.RULE_integer = 47;
PythonParser.RULE_yield_expr = 48;
PythonParser.RULE_yield_arg = 49;
PythonParser.RULE_trailer = 50;
PythonParser.RULE_arguments = 51;
PythonParser.RULE_arglist = 52;
PythonParser.RULE_argument = 53;
PythonParser.RULE_subscriptlist = 54;
PythonParser.RULE_subscript = 55;
PythonParser.RULE_sliceop = 56;
PythonParser.RULE_comp_for = 57;
PythonParser.RULE_comp_iter = 58;


function RootContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_root;
    return this;
}

RootContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootContext.prototype.constructor = RootContext;

RootContext.prototype.EOF = function() {
    return this.getToken(PythonParser.EOF, 0);
};

RootContext.prototype.single_input = function() {
    return this.getTypedRuleContext(Single_inputContext,0);
};

RootContext.prototype.file_input = function() {
    return this.getTypedRuleContext(File_inputContext,0);
};

RootContext.prototype.eval_input = function() {
    return this.getTypedRuleContext(Eval_inputContext,0);
};

RootContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterRoot(this);
	}
};

RootContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitRoot(this);
	}
};

RootContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitRoot(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.RootContext = RootContext;

PythonParser.prototype.root = function() {

    var localctx = new RootContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PythonParser.RULE_root);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 121;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 118;
            this.single_input();

        } else if(la_===2) {
            this.state = 119;
            this.file_input();

        } else if(la_===3) {
            this.state = 120;
            this.eval_input();

        }
        this.state = 123;
        this.match(PythonParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Single_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_single_input;
    return this;
}

Single_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_inputContext.prototype.constructor = Single_inputContext;

Single_inputContext.prototype.LINE_BREAK = function() {
    return this.getToken(PythonParser.LINE_BREAK, 0);
};

Single_inputContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

Single_inputContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

Single_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterSingle_input(this);
	}
};

Single_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitSingle_input(this);
	}
};

Single_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitSingle_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Single_inputContext = Single_inputContext;

PythonParser.prototype.single_input = function() {

    var localctx = new Single_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PythonParser.RULE_single_input);
    try {
        this.state = 130;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 125;
            this.match(PythonParser.LINE_BREAK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 126;
            this.simple_stmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 127;
            this.compound_stmt();
            this.state = 128;
            this.match(PythonParser.LINE_BREAK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function File_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_file_input;
    return this;
}

File_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_inputContext.prototype.constructor = File_inputContext;

File_inputContext.prototype.LINE_BREAK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.LINE_BREAK);
    } else {
        return this.getToken(PythonParser.LINE_BREAK, i);
    }
};


File_inputContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

File_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterFile_input(this);
	}
};

File_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitFile_input(this);
	}
};

File_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitFile_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.File_inputContext = File_inputContext;

PythonParser.prototype.file_input = function() {

    var localctx = new File_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PythonParser.RULE_file_input);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 134; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 134;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 132;
        		    this.match(PythonParser.LINE_BREAK);
        		    break;

        		case 2:
        		    this.state = 133;
        		    this.stmt();
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 136; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,3, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Eval_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_eval_input;
    return this;
}

Eval_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_inputContext.prototype.constructor = Eval_inputContext;

Eval_inputContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Eval_inputContext.prototype.LINE_BREAK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.LINE_BREAK);
    } else {
        return this.getToken(PythonParser.LINE_BREAK, i);
    }
};


Eval_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterEval_input(this);
	}
};

Eval_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitEval_input(this);
	}
};

Eval_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitEval_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Eval_inputContext = Eval_inputContext;

PythonParser.prototype.eval_input = function() {

    var localctx = new Eval_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PythonParser.RULE_eval_input);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 138;
        this.testlist();
        this.state = 142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.LINE_BREAK) {
            this.state = 139;
            this.match(PythonParser.LINE_BREAK);
            this.state = 144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

StmtContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitStmt(this);
	}
};

StmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.StmtContext = StmtContext;

PythonParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PythonParser.RULE_stmt);
    try {
        this.state = 147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 145;
            this.simple_stmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 146;
            this.compound_stmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compound_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_compound_stmt;
    return this;
}

Compound_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_stmtContext.prototype.constructor = Compound_stmtContext;


 
Compound_stmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function While_stmtContext(parser, ctx) {
	Compound_stmtContext.call(this, parser);
    Compound_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

While_stmtContext.prototype = Object.create(Compound_stmtContext.prototype);
While_stmtContext.prototype.constructor = While_stmtContext;

PythonParser.While_stmtContext = While_stmtContext;

While_stmtContext.prototype.WHILE = function() {
    return this.getToken(PythonParser.WHILE, 0);
};

While_stmtContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

While_stmtContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

While_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

While_stmtContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};
While_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterWhile_stmt(this);
	}
};

While_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitWhile_stmt(this);
	}
};

While_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitWhile_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Try_stmtContext(parser, ctx) {
	Compound_stmtContext.call(this, parser);
    Compound_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Try_stmtContext.prototype = Object.create(Compound_stmtContext.prototype);
Try_stmtContext.prototype.constructor = Try_stmtContext;

PythonParser.Try_stmtContext = Try_stmtContext;

Try_stmtContext.prototype.TRY = function() {
    return this.getToken(PythonParser.TRY, 0);
};

Try_stmtContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

Try_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Try_stmtContext.prototype.finally_clause = function() {
    return this.getTypedRuleContext(Finally_clauseContext,0);
};

Try_stmtContext.prototype.except_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Except_clauseContext);
    } else {
        return this.getTypedRuleContext(Except_clauseContext,i);
    }
};

Try_stmtContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};
Try_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterTry_stmt(this);
	}
};

Try_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitTry_stmt(this);
	}
};

Try_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitTry_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function If_stmtContext(parser, ctx) {
	Compound_stmtContext.call(this, parser);
    this.cond = null; // TestContext;
    Compound_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

If_stmtContext.prototype = Object.create(Compound_stmtContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;

PythonParser.If_stmtContext = If_stmtContext;

If_stmtContext.prototype.IF = function() {
    return this.getToken(PythonParser.IF, 0);
};

If_stmtContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

If_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

If_stmtContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

If_stmtContext.prototype.elif_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Elif_clauseContext);
    } else {
        return this.getTypedRuleContext(Elif_clauseContext,i);
    }
};

If_stmtContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};
If_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterIf_stmt(this);
	}
};

If_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitIf_stmt(this);
	}
};

If_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitIf_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function With_stmtContext(parser, ctx) {
	Compound_stmtContext.call(this, parser);
    Compound_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

With_stmtContext.prototype = Object.create(Compound_stmtContext.prototype);
With_stmtContext.prototype.constructor = With_stmtContext;

PythonParser.With_stmtContext = With_stmtContext;

With_stmtContext.prototype.WITH = function() {
    return this.getToken(PythonParser.WITH, 0);
};

With_stmtContext.prototype.with_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(With_itemContext);
    } else {
        return this.getTypedRuleContext(With_itemContext,i);
    }
};

With_stmtContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

With_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

With_stmtContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

With_stmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};

With_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterWith_stmt(this);
	}
};

With_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitWith_stmt(this);
	}
};

With_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitWith_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Class_or_func_def_stmtContext(parser, ctx) {
	Compound_stmtContext.call(this, parser);
    Compound_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Class_or_func_def_stmtContext.prototype = Object.create(Compound_stmtContext.prototype);
Class_or_func_def_stmtContext.prototype.constructor = Class_or_func_def_stmtContext;

PythonParser.Class_or_func_def_stmtContext = Class_or_func_def_stmtContext;

Class_or_func_def_stmtContext.prototype.classdef = function() {
    return this.getTypedRuleContext(ClassdefContext,0);
};

Class_or_func_def_stmtContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Class_or_func_def_stmtContext.prototype.decorator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecoratorContext);
    } else {
        return this.getTypedRuleContext(DecoratorContext,i);
    }
};
Class_or_func_def_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterClass_or_func_def_stmt(this);
	}
};

Class_or_func_def_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitClass_or_func_def_stmt(this);
	}
};

Class_or_func_def_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitClass_or_func_def_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function For_stmtContext(parser, ctx) {
	Compound_stmtContext.call(this, parser);
    Compound_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

For_stmtContext.prototype = Object.create(Compound_stmtContext.prototype);
For_stmtContext.prototype.constructor = For_stmtContext;

PythonParser.For_stmtContext = For_stmtContext;

For_stmtContext.prototype.FOR = function() {
    return this.getToken(PythonParser.FOR, 0);
};

For_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

For_stmtContext.prototype.IN = function() {
    return this.getToken(PythonParser.IN, 0);
};

For_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

For_stmtContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

For_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

For_stmtContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

For_stmtContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};
For_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterFor_stmt(this);
	}
};

For_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitFor_stmt(this);
	}
};

For_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitFor_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PythonParser.Compound_stmtContext = Compound_stmtContext;

PythonParser.prototype.compound_stmt = function() {

    var localctx = new Compound_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PythonParser.RULE_compound_stmt);
    var _la = 0; // Token type
    try {
        this.state = 223;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            localctx = new If_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 149;
            this.match(PythonParser.IF);
            this.state = 150;
            localctx.cond = this.test();
            this.state = 151;
            this.match(PythonParser.COLON);
            this.state = 152;
            this.suite();
            this.state = 156;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 153;
                    this.elif_clause(); 
                }
                this.state = 158;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
            }

            this.state = 160;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 159;
                this.else_clause();

            }
            break;

        case 2:
            localctx = new While_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 162;
            this.match(PythonParser.WHILE);
            this.state = 163;
            this.test();
            this.state = 164;
            this.match(PythonParser.COLON);
            this.state = 165;
            this.suite();
            this.state = 167;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            if(la_===1) {
                this.state = 166;
                this.else_clause();

            }
            break;

        case 3:
            localctx = new For_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.ASYNC) {
                this.state = 169;
                this.match(PythonParser.ASYNC);
            }

            this.state = 172;
            this.match(PythonParser.FOR);
            this.state = 173;
            this.exprlist();
            this.state = 174;
            this.match(PythonParser.IN);
            this.state = 175;
            this.testlist();
            this.state = 176;
            this.match(PythonParser.COLON);
            this.state = 177;
            this.suite();
            this.state = 179;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
            if(la_===1) {
                this.state = 178;
                this.else_clause();

            }
            break;

        case 4:
            localctx = new Try_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 181;
            this.match(PythonParser.TRY);
            this.state = 182;
            this.match(PythonParser.COLON);
            this.state = 183;
            this.suite();
            this.state = 196;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.EXCEPT:
                this.state = 185; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 184;
                		this.except_clause();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 187; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,11, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                this.state = 190;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
                if(la_===1) {
                    this.state = 189;
                    this.else_clause();

                }
                this.state = 193;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
                if(la_===1) {
                    this.state = 192;
                    this.finally_clause();

                }
                break;
            case PythonParser.FINALLY:
                this.state = 195;
                this.finally_clause();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 5:
            localctx = new With_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.ASYNC) {
                this.state = 198;
                this.match(PythonParser.ASYNC);
            }

            this.state = 201;
            this.match(PythonParser.WITH);
            this.state = 202;
            this.with_item();
            this.state = 207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.COMMA) {
                this.state = 203;
                this.match(PythonParser.COMMA);
                this.state = 204;
                this.with_item();
                this.state = 209;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 210;
            this.match(PythonParser.COLON);
            this.state = 211;
            this.suite();
            break;

        case 6:
            localctx = new Class_or_func_def_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 216;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.AT) {
                this.state = 213;
                this.decorator();
                this.state = 218;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 221;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.CLASS:
                this.state = 219;
                this.classdef();
                break;
            case PythonParser.DEF:
            case PythonParser.ASYNC:
                this.state = 220;
                this.funcdef();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SuiteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_suite;
    return this;
}

SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;

SuiteContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

SuiteContext.prototype.LINE_BREAK = function() {
    return this.getToken(PythonParser.LINE_BREAK, 0);
};

SuiteContext.prototype.INDENT = function() {
    return this.getToken(PythonParser.INDENT, 0);
};

SuiteContext.prototype.DEDENT = function() {
    return this.getToken(PythonParser.DEDENT, 0);
};

SuiteContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

SuiteContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterSuite(this);
	}
};

SuiteContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitSuite(this);
	}
};

SuiteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitSuite(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SuiteContext = SuiteContext;

PythonParser.prototype.suite = function() {

    var localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PythonParser.RULE_suite);
    try {
        this.state = 235;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 225;
            this.simple_stmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 226;
            this.match(PythonParser.LINE_BREAK);
            this.state = 227;
            this.match(PythonParser.INDENT);
            this.state = 229; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 228;
            		this.stmt();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 231; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,20, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 233;
            this.match(PythonParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecoratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_decorator;
    return this;
}

DecoratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorContext.prototype.constructor = DecoratorContext;

DecoratorContext.prototype.AT = function() {
    return this.getToken(PythonParser.AT, 0);
};

DecoratorContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

DecoratorContext.prototype.LINE_BREAK = function() {
    return this.getToken(PythonParser.LINE_BREAK, 0);
};

DecoratorContext.prototype.OPEN_PAREN = function() {
    return this.getToken(PythonParser.OPEN_PAREN, 0);
};

DecoratorContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(PythonParser.CLOSE_PAREN, 0);
};

DecoratorContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

DecoratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDecorator(this);
	}
};

DecoratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDecorator(this);
	}
};

DecoratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDecorator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DecoratorContext = DecoratorContext;

PythonParser.prototype.decorator = function() {

    var localctx = new DecoratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PythonParser.RULE_decorator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 237;
        this.match(PythonParser.AT);
        this.state = 238;
        this.dotted_name(0);
        this.state = 244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.OPEN_PAREN) {
            this.state = 239;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.STAR - 36)) | (1 << (PythonParser.POWER - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 240;
                this.arglist();
            }

            this.state = 243;
            this.match(PythonParser.CLOSE_PAREN);
        }

        this.state = 246;
        this.match(PythonParser.LINE_BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Elif_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_elif_clause;
    return this;
}

Elif_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Elif_clauseContext.prototype.constructor = Elif_clauseContext;

Elif_clauseContext.prototype.ELIF = function() {
    return this.getToken(PythonParser.ELIF, 0);
};

Elif_clauseContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Elif_clauseContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

Elif_clauseContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Elif_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterElif_clause(this);
	}
};

Elif_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitElif_clause(this);
	}
};

Elif_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitElif_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Elif_clauseContext = Elif_clauseContext;

PythonParser.prototype.elif_clause = function() {

    var localctx = new Elif_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PythonParser.RULE_elif_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.match(PythonParser.ELIF);
        this.state = 249;
        this.test();
        this.state = 250;
        this.match(PythonParser.COLON);
        this.state = 251;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Else_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_else_clause;
    return this;
}

Else_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_clauseContext.prototype.constructor = Else_clauseContext;

Else_clauseContext.prototype.ELSE = function() {
    return this.getToken(PythonParser.ELSE, 0);
};

Else_clauseContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

Else_clauseContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Else_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterElse_clause(this);
	}
};

Else_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitElse_clause(this);
	}
};

Else_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitElse_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Else_clauseContext = Else_clauseContext;

PythonParser.prototype.else_clause = function() {

    var localctx = new Else_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PythonParser.RULE_else_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 253;
        this.match(PythonParser.ELSE);
        this.state = 254;
        this.match(PythonParser.COLON);
        this.state = 255;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Finally_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_finally_clause;
    return this;
}

Finally_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Finally_clauseContext.prototype.constructor = Finally_clauseContext;

Finally_clauseContext.prototype.FINALLY = function() {
    return this.getToken(PythonParser.FINALLY, 0);
};

Finally_clauseContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

Finally_clauseContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Finally_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterFinally_clause(this);
	}
};

Finally_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitFinally_clause(this);
	}
};

Finally_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitFinally_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Finally_clauseContext = Finally_clauseContext;

PythonParser.prototype.finally_clause = function() {

    var localctx = new Finally_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PythonParser.RULE_finally_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 257;
        this.match(PythonParser.FINALLY);
        this.state = 258;
        this.match(PythonParser.COLON);
        this.state = 259;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function With_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_with_item;
    return this;
}

With_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_itemContext.prototype.constructor = With_itemContext;

With_itemContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

With_itemContext.prototype.AS = function() {
    return this.getToken(PythonParser.AS, 0);
};

With_itemContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

With_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterWith_item(this);
	}
};

With_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitWith_item(this);
	}
};

With_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitWith_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.With_itemContext = With_itemContext;

PythonParser.prototype.with_item = function() {

    var localctx = new With_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PythonParser.RULE_with_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 261;
        this.test();
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 262;
            this.match(PythonParser.AS);
            this.state = 263;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Except_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_except_clause;
    return this;
}

Except_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Except_clauseContext.prototype.constructor = Except_clauseContext;

Except_clauseContext.prototype.EXCEPT = function() {
    return this.getToken(PythonParser.EXCEPT, 0);
};

Except_clauseContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

Except_clauseContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

Except_clauseContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Except_clauseContext.prototype.COMMA = function() {
    return this.getToken(PythonParser.COMMA, 0);
};

Except_clauseContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Except_clauseContext.prototype.AS = function() {
    return this.getToken(PythonParser.AS, 0);
};

Except_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterExcept_clause(this);
	}
};

Except_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitExcept_clause(this);
	}
};

Except_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitExcept_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Except_clauseContext = Except_clauseContext;

PythonParser.prototype.except_clause = function() {

    var localctx = new Except_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PythonParser.RULE_except_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.match(PythonParser.EXCEPT);
        this.state = 280;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
            this.state = 267;
            this.test();
            this.state = 278;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            if(la_===1) {
                this.state = 268;
                if (!( CheckVersion(2))) {
                    throw new antlr4.error.FailedPredicateException(this, "CheckVersion(2)");
                }
                this.state = 269;
                this.match(PythonParser.COMMA);
                this.state = 270;
                this.name();
                SetVersion(2);

            } else if(la_===2) {
                this.state = 273;
                if (!( CheckVersion(3))) {
                    throw new antlr4.error.FailedPredicateException(this, "CheckVersion(3)");
                }
                this.state = 274;
                this.match(PythonParser.AS);
                this.state = 275;
                this.name();
                SetVersion(3);

            }
        }

        this.state = 282;
        this.match(PythonParser.COLON);
        this.state = 283;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_classdef;
    return this;
}

ClassdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassdefContext.prototype.constructor = ClassdefContext;

ClassdefContext.prototype.CLASS = function() {
    return this.getToken(PythonParser.CLASS, 0);
};

ClassdefContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ClassdefContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

ClassdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

ClassdefContext.prototype.OPEN_PAREN = function() {
    return this.getToken(PythonParser.OPEN_PAREN, 0);
};

ClassdefContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(PythonParser.CLOSE_PAREN, 0);
};

ClassdefContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

ClassdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterClassdef(this);
	}
};

ClassdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitClassdef(this);
	}
};

ClassdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitClassdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ClassdefContext = ClassdefContext;

PythonParser.prototype.classdef = function() {

    var localctx = new ClassdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PythonParser.RULE_classdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 285;
        this.match(PythonParser.CLASS);
        this.state = 286;
        this.name();
        this.state = 292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.OPEN_PAREN) {
            this.state = 287;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.STAR - 36)) | (1 << (PythonParser.POWER - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 288;
                this.arglist();
            }

            this.state = 291;
            this.match(PythonParser.CLOSE_PAREN);
        }

        this.state = 294;
        this.match(PythonParser.COLON);
        this.state = 295;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_funcdef;
    return this;
}

FuncdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncdefContext.prototype.constructor = FuncdefContext;

FuncdefContext.prototype.DEF = function() {
    return this.getToken(PythonParser.DEF, 0);
};

FuncdefContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

FuncdefContext.prototype.OPEN_PAREN = function() {
    return this.getToken(PythonParser.OPEN_PAREN, 0);
};

FuncdefContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(PythonParser.CLOSE_PAREN, 0);
};

FuncdefContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

FuncdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

FuncdefContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

FuncdefContext.prototype.typedargslist = function() {
    return this.getTypedRuleContext(TypedargslistContext,0);
};

FuncdefContext.prototype.ARROW = function() {
    return this.getToken(PythonParser.ARROW, 0);
};

FuncdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

FuncdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterFuncdef(this);
	}
};

FuncdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitFuncdef(this);
	}
};

FuncdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitFuncdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.FuncdefContext = FuncdefContext;

PythonParser.prototype.funcdef = function() {

    var localctx = new FuncdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PythonParser.RULE_funcdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.ASYNC) {
            this.state = 297;
            this.match(PythonParser.ASYNC);
        }

        this.state = 300;
        this.match(PythonParser.DEF);
        this.state = 301;
        this.name();
        this.state = 302;
        this.match(PythonParser.OPEN_PAREN);
        this.state = 304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (PythonParser.TRUE - 39)) | (1 << (PythonParser.FALSE - 39)) | (1 << (PythonParser.STAR - 39)) | (1 << (PythonParser.POWER - 39)))) !== 0) || _la===PythonParser.NAME) {
            this.state = 303;
            this.typedargslist();
        }

        this.state = 306;
        this.match(PythonParser.CLOSE_PAREN);
        this.state = 309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.ARROW) {
            this.state = 307;
            this.match(PythonParser.ARROW);
            this.state = 308;
            this.test();
        }

        this.state = 311;
        this.match(PythonParser.COLON);
        this.state = 312;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypedargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_typedargslist;
    return this;
}

TypedargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedargslistContext.prototype.constructor = TypedargslistContext;

TypedargslistContext.prototype.args = function() {
    return this.getTypedRuleContext(ArgsContext,0);
};

TypedargslistContext.prototype.kwargs = function() {
    return this.getTypedRuleContext(KwargsContext,0);
};

TypedargslistContext.prototype.def_parameters = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Def_parametersContext);
    } else {
        return this.getTypedRuleContext(Def_parametersContext,i);
    }
};

TypedargslistContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


TypedargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterTypedargslist(this);
	}
};

TypedargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitTypedargslist(this);
	}
};

TypedargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitTypedargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TypedargslistContext = TypedargslistContext;

PythonParser.prototype.typedargslist = function() {

    var localctx = new TypedargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PythonParser.RULE_typedargslist);
    var _la = 0; // Token type
    try {
        this.state = 338;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 317;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            if(la_===1) {
                this.state = 314;
                this.def_parameters();
                this.state = 315;
                this.match(PythonParser.COMMA);

            }
            this.state = 329;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.STAR:
                this.state = 319;
                this.args();
                this.state = 322;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
                if(la_===1) {
                    this.state = 320;
                    this.match(PythonParser.COMMA);
                    this.state = 321;
                    this.def_parameters();

                }
                this.state = 326;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
                if(la_===1) {
                    this.state = 324;
                    this.match(PythonParser.COMMA);
                    this.state = 325;
                    this.kwargs();

                }
                break;
            case PythonParser.POWER:
                this.state = 328;
                this.kwargs();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 331;
                this.match(PythonParser.COMMA);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 334;
            this.def_parameters();
            this.state = 336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 335;
                this.match(PythonParser.COMMA);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_args;
    return this;
}

ArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgsContext.prototype.constructor = ArgsContext;

ArgsContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

ArgsContext.prototype.named_parameter = function() {
    return this.getTypedRuleContext(Named_parameterContext,0);
};

ArgsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterArgs(this);
	}
};

ArgsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitArgs(this);
	}
};

ArgsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitArgs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArgsContext = ArgsContext;

PythonParser.prototype.args = function() {

    var localctx = new ArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PythonParser.RULE_args);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.match(PythonParser.STAR);
        this.state = 341;
        this.named_parameter();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KwargsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_kwargs;
    return this;
}

KwargsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KwargsContext.prototype.constructor = KwargsContext;

KwargsContext.prototype.POWER = function() {
    return this.getToken(PythonParser.POWER, 0);
};

KwargsContext.prototype.named_parameter = function() {
    return this.getTypedRuleContext(Named_parameterContext,0);
};

KwargsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterKwargs(this);
	}
};

KwargsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitKwargs(this);
	}
};

KwargsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitKwargs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.KwargsContext = KwargsContext;

PythonParser.prototype.kwargs = function() {

    var localctx = new KwargsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PythonParser.RULE_kwargs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(PythonParser.POWER);
        this.state = 344;
        this.named_parameter();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Def_parametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_def_parameters;
    return this;
}

Def_parametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Def_parametersContext.prototype.constructor = Def_parametersContext;

Def_parametersContext.prototype.def_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Def_parameterContext);
    } else {
        return this.getTypedRuleContext(Def_parameterContext,i);
    }
};

Def_parametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


Def_parametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDef_parameters(this);
	}
};

Def_parametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDef_parameters(this);
	}
};

Def_parametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDef_parameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Def_parametersContext = Def_parametersContext;

PythonParser.prototype.def_parameters = function() {

    var localctx = new Def_parametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PythonParser.RULE_def_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        this.def_parameter();
        this.state = 351;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 347;
                this.match(PythonParser.COMMA);
                this.state = 348;
                this.def_parameter(); 
            }
            this.state = 353;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Def_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_def_parameter;
    return this;
}

Def_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Def_parameterContext.prototype.constructor = Def_parameterContext;

Def_parameterContext.prototype.named_parameter = function() {
    return this.getTypedRuleContext(Named_parameterContext,0);
};

Def_parameterContext.prototype.ASSIGN = function() {
    return this.getToken(PythonParser.ASSIGN, 0);
};

Def_parameterContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Def_parameterContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

Def_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDef_parameter(this);
	}
};

Def_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDef_parameter(this);
	}
};

Def_parameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDef_parameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Def_parameterContext = Def_parameterContext;

PythonParser.prototype.def_parameter = function() {

    var localctx = new Def_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PythonParser.RULE_def_parameter);
    var _la = 0; // Token type
    try {
        this.state = 360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 354;
            this.named_parameter();
            this.state = 357;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.ASSIGN) {
                this.state = 355;
                this.match(PythonParser.ASSIGN);
                this.state = 356;
                this.test();
            }

            break;
        case PythonParser.STAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 359;
            this.match(PythonParser.STAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Named_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_named_parameter;
    return this;
}

Named_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_parameterContext.prototype.constructor = Named_parameterContext;

Named_parameterContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Named_parameterContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

Named_parameterContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Named_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterNamed_parameter(this);
	}
};

Named_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitNamed_parameter(this);
	}
};

Named_parameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitNamed_parameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Named_parameterContext = Named_parameterContext;

PythonParser.prototype.named_parameter = function() {

    var localctx = new Named_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PythonParser.RULE_named_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 362;
        this.name();
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.COLON) {
            this.state = 363;
            this.match(PythonParser.COLON);
            this.state = 364;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simple_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_simple_stmt;
    return this;
}

Simple_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_stmtContext.prototype.constructor = Simple_stmtContext;

Simple_stmtContext.prototype.small_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Small_stmtContext);
    } else {
        return this.getTypedRuleContext(Small_stmtContext,i);
    }
};

Simple_stmtContext.prototype.LINE_BREAK = function() {
    return this.getToken(PythonParser.LINE_BREAK, 0);
};

Simple_stmtContext.prototype.EOF = function() {
    return this.getToken(PythonParser.EOF, 0);
};

Simple_stmtContext.prototype.SEMI_COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.SEMI_COLON);
    } else {
        return this.getToken(PythonParser.SEMI_COLON, i);
    }
};


Simple_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitSimple_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Simple_stmtContext = Simple_stmtContext;

PythonParser.prototype.simple_stmt = function() {

    var localctx = new Simple_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PythonParser.RULE_simple_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 367;
        this.small_stmt();
        this.state = 372;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 368;
                this.match(PythonParser.SEMI_COLON);
                this.state = 369;
                this.small_stmt(); 
            }
            this.state = 374;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
        }

        this.state = 376;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.SEMI_COLON) {
            this.state = 375;
            this.match(PythonParser.SEMI_COLON);
        }

        this.state = 378;
        _la = this._input.LA(1);
        if(!(_la===PythonParser.EOF || _la===PythonParser.LINE_BREAK)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Small_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_small_stmt;
    return this;
}

Small_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Small_stmtContext.prototype.constructor = Small_stmtContext;


 
Small_stmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Assert_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Assert_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Assert_stmtContext.prototype.constructor = Assert_stmtContext;

PythonParser.Assert_stmtContext = Assert_stmtContext;

Assert_stmtContext.prototype.ASSERT = function() {
    return this.getToken(PythonParser.ASSERT, 0);
};

Assert_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Assert_stmtContext.prototype.COMMA = function() {
    return this.getToken(PythonParser.COMMA, 0);
};
Assert_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitAssert_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Nonlocal_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Nonlocal_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Nonlocal_stmtContext.prototype.constructor = Nonlocal_stmtContext;

PythonParser.Nonlocal_stmtContext = Nonlocal_stmtContext;

Nonlocal_stmtContext.prototype.NONLOCAL = function() {
    return this.getToken(PythonParser.NONLOCAL, 0);
};

Nonlocal_stmtContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Nonlocal_stmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};

Nonlocal_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitNonlocal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Pass_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Pass_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Pass_stmtContext.prototype.constructor = Pass_stmtContext;

PythonParser.Pass_stmtContext = Pass_stmtContext;

Pass_stmtContext.prototype.PASS = function() {
    return this.getToken(PythonParser.PASS, 0);
};
Pass_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterPass_stmt(this);
	}
};

Pass_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitPass_stmt(this);
	}
};

Pass_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitPass_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Import_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Import_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Import_stmtContext.prototype.constructor = Import_stmtContext;

PythonParser.Import_stmtContext = Import_stmtContext;

Import_stmtContext.prototype.IMPORT = function() {
    return this.getToken(PythonParser.IMPORT, 0);
};

Import_stmtContext.prototype.dotted_as_names = function() {
    return this.getTypedRuleContext(Dotted_as_namesContext,0);
};
Import_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterImport_stmt(this);
	}
};

Import_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitImport_stmt(this);
	}
};

Import_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitImport_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Expr_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Expr_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Expr_stmtContext.prototype.constructor = Expr_stmtContext;

PythonParser.Expr_stmtContext = Expr_stmtContext;

Expr_stmtContext.prototype.testlist_star_expr = function() {
    return this.getTypedRuleContext(Testlist_star_exprContext,0);
};

Expr_stmtContext.prototype.assign_part = function() {
    return this.getTypedRuleContext(Assign_partContext,0);
};
Expr_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitExpr_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Raise_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Raise_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Raise_stmtContext.prototype.constructor = Raise_stmtContext;

PythonParser.Raise_stmtContext = Raise_stmtContext;

Raise_stmtContext.prototype.RAISE = function() {
    return this.getToken(PythonParser.RAISE, 0);
};

Raise_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Raise_stmtContext.prototype.FROM = function() {
    return this.getToken(PythonParser.FROM, 0);
};

Raise_stmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};

Raise_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitRaise_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Yield_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Yield_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Yield_stmtContext.prototype.constructor = Yield_stmtContext;

PythonParser.Yield_stmtContext = Yield_stmtContext;

Yield_stmtContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};
Yield_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterYield_stmt(this);
	}
};

Yield_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitYield_stmt(this);
	}
};

Yield_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitYield_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function From_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

From_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
From_stmtContext.prototype.constructor = From_stmtContext;

PythonParser.From_stmtContext = From_stmtContext;

From_stmtContext.prototype.FROM = function() {
    return this.getToken(PythonParser.FROM, 0);
};

From_stmtContext.prototype.IMPORT = function() {
    return this.getToken(PythonParser.IMPORT, 0);
};

From_stmtContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

From_stmtContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

From_stmtContext.prototype.OPEN_PAREN = function() {
    return this.getToken(PythonParser.OPEN_PAREN, 0);
};

From_stmtContext.prototype.import_as_names = function() {
    return this.getTypedRuleContext(Import_as_namesContext,0);
};

From_stmtContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(PythonParser.CLOSE_PAREN, 0);
};

From_stmtContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.DOT);
    } else {
        return this.getToken(PythonParser.DOT, i);
    }
};


From_stmtContext.prototype.ELLIPSIS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.ELLIPSIS);
    } else {
        return this.getToken(PythonParser.ELLIPSIS, i);
    }
};

From_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterFrom_stmt(this);
	}
};

From_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitFrom_stmt(this);
	}
};

From_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitFrom_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Global_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Global_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Global_stmtContext.prototype.constructor = Global_stmtContext;

PythonParser.Global_stmtContext = Global_stmtContext;

Global_stmtContext.prototype.GLOBAL = function() {
    return this.getToken(PythonParser.GLOBAL, 0);
};

Global_stmtContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Global_stmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};

Global_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitGlobal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Continue_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Continue_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Continue_stmtContext.prototype.constructor = Continue_stmtContext;

PythonParser.Continue_stmtContext = Continue_stmtContext;

Continue_stmtContext.prototype.CONTINUE = function() {
    return this.getToken(PythonParser.CONTINUE, 0);
};
Continue_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitContinue_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Exec_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Exec_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Exec_stmtContext.prototype.constructor = Exec_stmtContext;

PythonParser.Exec_stmtContext = Exec_stmtContext;

Exec_stmtContext.prototype.EXEC = function() {
    return this.getToken(PythonParser.EXEC, 0);
};

Exec_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Exec_stmtContext.prototype.IN = function() {
    return this.getToken(PythonParser.IN, 0);
};

Exec_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Exec_stmtContext.prototype.COMMA = function() {
    return this.getToken(PythonParser.COMMA, 0);
};
Exec_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterExec_stmt(this);
	}
};

Exec_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitExec_stmt(this);
	}
};

Exec_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitExec_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Break_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Break_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Break_stmtContext.prototype.constructor = Break_stmtContext;

PythonParser.Break_stmtContext = Break_stmtContext;

Break_stmtContext.prototype.BREAK = function() {
    return this.getToken(PythonParser.BREAK, 0);
};
Break_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterBreak_stmt(this);
	}
};

Break_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitBreak_stmt(this);
	}
};

Break_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitBreak_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Del_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Del_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Del_stmtContext.prototype.constructor = Del_stmtContext;

PythonParser.Del_stmtContext = Del_stmtContext;

Del_stmtContext.prototype.DEL = function() {
    return this.getToken(PythonParser.DEL, 0);
};

Del_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};
Del_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDel_stmt(this);
	}
};

Del_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDel_stmt(this);
	}
};

Del_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDel_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Print_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Print_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Print_stmtContext.prototype.constructor = Print_stmtContext;

PythonParser.Print_stmtContext = Print_stmtContext;

Print_stmtContext.prototype.PRINT = function() {
    return this.getToken(PythonParser.PRINT, 0);
};

Print_stmtContext.prototype.RIGHT_SHIFT = function() {
    return this.getToken(PythonParser.RIGHT_SHIFT, 0);
};

Print_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Print_stmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};

Print_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterPrint_stmt(this);
	}
};

Print_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitPrint_stmt(this);
	}
};

Print_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitPrint_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function Return_stmtContext(parser, ctx) {
	Small_stmtContext.call(this, parser);
    Small_stmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Return_stmtContext.prototype = Object.create(Small_stmtContext.prototype);
Return_stmtContext.prototype.constructor = Return_stmtContext;

PythonParser.Return_stmtContext = Return_stmtContext;

Return_stmtContext.prototype.RETURN = function() {
    return this.getToken(PythonParser.RETURN, 0);
};

Return_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};
Return_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterReturn_stmt(this);
	}
};

Return_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitReturn_stmt(this);
	}
};

Return_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitReturn_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PythonParser.Small_stmtContext = Small_stmtContext;

PythonParser.prototype.small_stmt = function() {

    var localctx = new Small_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PythonParser.RULE_small_stmt);
    var _la = 0; // Token type
    try {
        this.state = 504;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Expr_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 380;
            this.testlist_star_expr();
            this.state = 382;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
            if(la_===1) {
                this.state = 381;
                this.assign_part();

            }
            break;

        case 2:
            localctx = new Print_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 384;
            if (!( CheckVersion(2))) {
                throw new antlr4.error.FailedPredicateException(this, "CheckVersion(2)");
            }
            this.state = 385;
            this.match(PythonParser.PRINT);
            this.state = 408;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.NONE:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.AWAIT:
            case PythonParser.PRINT:
            case PythonParser.EXEC:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.ELLIPSIS:
            case PythonParser.REVERSE_QUOTE:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.STRING:
            case PythonParser.DECIMAL_INTEGER:
            case PythonParser.OCT_INTEGER:
            case PythonParser.HEX_INTEGER:
            case PythonParser.BIN_INTEGER:
            case PythonParser.IMAG_NUMBER:
            case PythonParser.FLOAT_NUMBER:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACE:
            case PythonParser.OPEN_BRACKET:
            case PythonParser.NAME:
                this.state = 386;
                this.test();
                this.state = 391;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 387;
                        this.match(PythonParser.COMMA);
                        this.state = 388;
                        this.test(); 
                    }
                    this.state = 393;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
                }

                this.state = 395;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 394;
                    this.match(PythonParser.COMMA);
                }

                break;
            case PythonParser.RIGHT_SHIFT:
                this.state = 397;
                this.match(PythonParser.RIGHT_SHIFT);
                this.state = 398;
                this.test();

                this.state = 401; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 399;
                		this.match(PythonParser.COMMA);
                		this.state = 400;
                		this.test();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 403; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,48, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                this.state = 406;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 405;
                    this.match(PythonParser.COMMA);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            SetVersion(2);
            break;

        case 3:
            localctx = new Del_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 412;
            this.match(PythonParser.DEL);
            this.state = 413;
            this.exprlist();
            break;

        case 4:
            localctx = new Pass_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 414;
            this.match(PythonParser.PASS);
            break;

        case 5:
            localctx = new Break_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 415;
            this.match(PythonParser.BREAK);
            break;

        case 6:
            localctx = new Continue_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 416;
            this.match(PythonParser.CONTINUE);
            break;

        case 7:
            localctx = new Return_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 417;
            this.match(PythonParser.RETURN);
            this.state = 419;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 418;
                this.testlist();
            }

            break;

        case 8:
            localctx = new Raise_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 421;
            this.match(PythonParser.RAISE);
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 422;
                this.test();
                this.state = 429;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 423;
                    this.match(PythonParser.COMMA);
                    this.state = 424;
                    this.test();
                    this.state = 427;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===PythonParser.COMMA) {
                        this.state = 425;
                        this.match(PythonParser.COMMA);
                        this.state = 426;
                        this.test();
                    }

                }

            }

            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.FROM) {
                this.state = 433;
                this.match(PythonParser.FROM);
                this.state = 434;
                this.test();
            }

            break;

        case 9:
            localctx = new Yield_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 437;
            this.yield_expr();
            break;

        case 10:
            localctx = new Import_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 438;
            this.match(PythonParser.IMPORT);
            this.state = 439;
            this.dotted_as_names();
            break;

        case 11:
            localctx = new From_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 440;
            this.match(PythonParser.FROM);
            this.state = 453;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            switch(la_) {
            case 1:
                this.state = 444;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS) {
                    this.state = 441;
                    _la = this._input.LA(1);
                    if(!(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 446;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 447;
                this.dotted_name(0);
                break;

            case 2:
                this.state = 449; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 448;
                    _la = this._input.LA(1);
                    if(!(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 451; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS);
                break;

            }
            this.state = 455;
            this.match(PythonParser.IMPORT);
            this.state = 462;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.STAR:
                this.state = 456;
                this.match(PythonParser.STAR);
                break;
            case PythonParser.OPEN_PAREN:
                this.state = 457;
                this.match(PythonParser.OPEN_PAREN);
                this.state = 458;
                this.import_as_names();
                this.state = 459;
                this.match(PythonParser.CLOSE_PAREN);
                break;
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.NAME:
                this.state = 461;
                this.import_as_names();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 12:
            localctx = new Global_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 464;
            this.match(PythonParser.GLOBAL);
            this.state = 465;
            this.name();
            this.state = 470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.COMMA) {
                this.state = 466;
                this.match(PythonParser.COMMA);
                this.state = 467;
                this.name();
                this.state = 472;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 13:
            localctx = new Exec_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 473;
            if (!( CheckVersion(2))) {
                throw new antlr4.error.FailedPredicateException(this, "CheckVersion(2)");
            }
            this.state = 474;
            this.match(PythonParser.EXEC);
            this.state = 475;
            this.expr(0);
            this.state = 482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.IN) {
                this.state = 476;
                this.match(PythonParser.IN);
                this.state = 477;
                this.test();
                this.state = 480;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 478;
                    this.match(PythonParser.COMMA);
                    this.state = 479;
                    this.test();
                }

            }

            SetVersion(2);
            break;

        case 14:
            localctx = new Assert_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 486;
            this.match(PythonParser.ASSERT);
            this.state = 487;
            this.test();
            this.state = 490;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 488;
                this.match(PythonParser.COMMA);
                this.state = 489;
                this.test();
            }

            break;

        case 15:
            localctx = new Nonlocal_stmtContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 492;
            if (!( CheckVersion(3))) {
                throw new antlr4.error.FailedPredicateException(this, "CheckVersion(3)");
            }
            this.state = 493;
            this.match(PythonParser.NONLOCAL);
            this.state = 494;
            this.name();
            this.state = 499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.COMMA) {
                this.state = 495;
                this.match(PythonParser.COMMA);
                this.state = 496;
                this.name();
                this.state = 501;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            SetVersion(3);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Testlist_star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist_star_expr;
    return this;
}

Testlist_star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_star_exprContext.prototype.constructor = Testlist_star_exprContext;

Testlist_star_exprContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


Testlist_star_exprContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_star_exprContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_star_exprContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Testlist_star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitTestlist_star_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Testlist_star_exprContext = Testlist_star_exprContext;

PythonParser.prototype.testlist_star_expr = function() {

    var localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PythonParser.RULE_testlist_star_expr);
    try {
        this.state = 521;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 512; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 508;
            		this._errHandler.sync(this);
            		switch(this._input.LA(1)) {
            		case PythonParser.NONE:
            		case PythonParser.LAMBDA:
            		case PythonParser.NOT:
            		case PythonParser.AWAIT:
            		case PythonParser.PRINT:
            		case PythonParser.EXEC:
            		case PythonParser.TRUE:
            		case PythonParser.FALSE:
            		case PythonParser.ELLIPSIS:
            		case PythonParser.REVERSE_QUOTE:
            		case PythonParser.ADD:
            		case PythonParser.MINUS:
            		case PythonParser.NOT_OP:
            		case PythonParser.STRING:
            		case PythonParser.DECIMAL_INTEGER:
            		case PythonParser.OCT_INTEGER:
            		case PythonParser.HEX_INTEGER:
            		case PythonParser.BIN_INTEGER:
            		case PythonParser.IMAG_NUMBER:
            		case PythonParser.FLOAT_NUMBER:
            		case PythonParser.OPEN_PAREN:
            		case PythonParser.OPEN_BRACE:
            		case PythonParser.OPEN_BRACKET:
            		case PythonParser.NAME:
            		    this.state = 506;
            		    this.test();
            		    break;
            		case PythonParser.STAR:
            		    this.state = 507;
            		    this.star_expr();
            		    break;
            		default:
            		    throw new antlr4.error.NoViableAltException(this);
            		}
            		this.state = 510;
            		this.match(PythonParser.COMMA);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 514; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,67, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 518;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
            if(la_===1) {
                this.state = 516;
                this.test();

            } else if(la_===2) {
                this.state = 517;
                this.star_expr();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 520;
            this.testlist();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_star_expr;
    return this;
}

Star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Star_exprContext.prototype.constructor = Star_exprContext;

Star_exprContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

Star_exprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterStar_expr(this);
	}
};

Star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitStar_expr(this);
	}
};

Star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitStar_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Star_exprContext = Star_exprContext;

PythonParser.prototype.star_expr = function() {

    var localctx = new Star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PythonParser.RULE_star_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.match(PythonParser.STAR);
        this.state = 524;
        this.expr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Assign_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_assign_part;
    this.op = null; // Token
    return this;
}

Assign_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assign_partContext.prototype.constructor = Assign_partContext;

Assign_partContext.prototype.ASSIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.ASSIGN);
    } else {
        return this.getToken(PythonParser.ASSIGN, i);
    }
};


Assign_partContext.prototype.testlist_star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Testlist_star_exprContext);
    } else {
        return this.getTypedRuleContext(Testlist_star_exprContext,i);
    }
};

Assign_partContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

Assign_partContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

Assign_partContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Assign_partContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Assign_partContext.prototype.ADD_ASSIGN = function() {
    return this.getToken(PythonParser.ADD_ASSIGN, 0);
};

Assign_partContext.prototype.SUB_ASSIGN = function() {
    return this.getToken(PythonParser.SUB_ASSIGN, 0);
};

Assign_partContext.prototype.MULT_ASSIGN = function() {
    return this.getToken(PythonParser.MULT_ASSIGN, 0);
};

Assign_partContext.prototype.AT_ASSIGN = function() {
    return this.getToken(PythonParser.AT_ASSIGN, 0);
};

Assign_partContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(PythonParser.DIV_ASSIGN, 0);
};

Assign_partContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(PythonParser.MOD_ASSIGN, 0);
};

Assign_partContext.prototype.AND_ASSIGN = function() {
    return this.getToken(PythonParser.AND_ASSIGN, 0);
};

Assign_partContext.prototype.OR_ASSIGN = function() {
    return this.getToken(PythonParser.OR_ASSIGN, 0);
};

Assign_partContext.prototype.XOR_ASSIGN = function() {
    return this.getToken(PythonParser.XOR_ASSIGN, 0);
};

Assign_partContext.prototype.LEFT_SHIFT_ASSIGN = function() {
    return this.getToken(PythonParser.LEFT_SHIFT_ASSIGN, 0);
};

Assign_partContext.prototype.RIGHT_SHIFT_ASSIGN = function() {
    return this.getToken(PythonParser.RIGHT_SHIFT_ASSIGN, 0);
};

Assign_partContext.prototype.POWER_ASSIGN = function() {
    return this.getToken(PythonParser.POWER_ASSIGN, 0);
};

Assign_partContext.prototype.IDIV_ASSIGN = function() {
    return this.getToken(PythonParser.IDIV_ASSIGN, 0);
};

Assign_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterAssign_part(this);
	}
};

Assign_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitAssign_part(this);
	}
};

Assign_partContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitAssign_part(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Assign_partContext = Assign_partContext;

PythonParser.prototype.assign_part = function() {

    var localctx = new Assign_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PythonParser.RULE_assign_part);
    var _la = 0; // Token type
    try {
        this.state = 556;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 526;
            this.match(PythonParser.ASSIGN);
            this.state = 540;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.NONE:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.AWAIT:
            case PythonParser.PRINT:
            case PythonParser.EXEC:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.ELLIPSIS:
            case PythonParser.REVERSE_QUOTE:
            case PythonParser.STAR:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.STRING:
            case PythonParser.DECIMAL_INTEGER:
            case PythonParser.OCT_INTEGER:
            case PythonParser.HEX_INTEGER:
            case PythonParser.BIN_INTEGER:
            case PythonParser.IMAG_NUMBER:
            case PythonParser.FLOAT_NUMBER:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACE:
            case PythonParser.OPEN_BRACKET:
            case PythonParser.NAME:
                this.state = 527;
                this.testlist_star_expr();
                this.state = 532;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 528;
                        this.match(PythonParser.ASSIGN);
                        this.state = 529;
                        this.testlist_star_expr(); 
                    }
                    this.state = 534;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
                }

                this.state = 537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PythonParser.ASSIGN) {
                    this.state = 535;
                    this.match(PythonParser.ASSIGN);
                    this.state = 536;
                    this.yield_expr();
                }

                break;
            case PythonParser.YIELD:
                this.state = 539;
                this.yield_expr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 542;
            if (!( CheckVersion(3))) {
                throw new antlr4.error.FailedPredicateException(this, "CheckVersion(3)");
            }
            this.state = 543;
            this.match(PythonParser.COLON);
            this.state = 544;
            this.test();
            this.state = 547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.ASSIGN) {
                this.state = 545;
                this.match(PythonParser.ASSIGN);
                this.state = 546;
                this.testlist();
            }

            SetVersion(3);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 551;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (PythonParser.ADD_ASSIGN - 70)) | (1 << (PythonParser.SUB_ASSIGN - 70)) | (1 << (PythonParser.MULT_ASSIGN - 70)) | (1 << (PythonParser.AT_ASSIGN - 70)) | (1 << (PythonParser.DIV_ASSIGN - 70)) | (1 << (PythonParser.MOD_ASSIGN - 70)) | (1 << (PythonParser.AND_ASSIGN - 70)) | (1 << (PythonParser.OR_ASSIGN - 70)) | (1 << (PythonParser.XOR_ASSIGN - 70)) | (1 << (PythonParser.LEFT_SHIFT_ASSIGN - 70)) | (1 << (PythonParser.RIGHT_SHIFT_ASSIGN - 70)) | (1 << (PythonParser.POWER_ASSIGN - 70)) | (1 << (PythonParser.IDIV_ASSIGN - 70)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 554;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.YIELD:
                this.state = 552;
                this.yield_expr();
                break;
            case PythonParser.NONE:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.AWAIT:
            case PythonParser.PRINT:
            case PythonParser.EXEC:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.ELLIPSIS:
            case PythonParser.REVERSE_QUOTE:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.STRING:
            case PythonParser.DECIMAL_INTEGER:
            case PythonParser.OCT_INTEGER:
            case PythonParser.HEX_INTEGER:
            case PythonParser.BIN_INTEGER:
            case PythonParser.IMAG_NUMBER:
            case PythonParser.FLOAT_NUMBER:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACE:
            case PythonParser.OPEN_BRACKET:
            case PythonParser.NAME:
                this.state = 553;
                this.testlist();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_exprlist;
    return this;
}

ExprlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprlistContext.prototype.constructor = ExprlistContext;

ExprlistContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprlistContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


ExprlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterExprlist(this);
	}
};

ExprlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitExprlist(this);
	}
};

ExprlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitExprlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ExprlistContext = ExprlistContext;

PythonParser.prototype.exprlist = function() {

    var localctx = new ExprlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PythonParser.RULE_exprlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 558;
        this.expr(0);
        this.state = 563;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 559;
                this.match(PythonParser.COMMA);
                this.state = 560;
                this.expr(0); 
            }
            this.state = 565;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        }

        this.state = 567;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 566;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_as_names;
    return this;
}

Import_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_namesContext.prototype.constructor = Import_as_namesContext;

Import_as_namesContext.prototype.import_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Import_as_nameContext);
    } else {
        return this.getTypedRuleContext(Import_as_nameContext,i);
    }
};

Import_as_namesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


Import_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterImport_as_names(this);
	}
};

Import_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitImport_as_names(this);
	}
};

Import_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitImport_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_as_namesContext = Import_as_namesContext;

PythonParser.prototype.import_as_names = function() {

    var localctx = new Import_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PythonParser.RULE_import_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.import_as_name();
        this.state = 574;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 570;
                this.match(PythonParser.COMMA);
                this.state = 571;
                this.import_as_name(); 
            }
            this.state = 576;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 577;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_as_name;
    return this;
}

Import_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_nameContext.prototype.constructor = Import_as_nameContext;

Import_as_nameContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Import_as_nameContext.prototype.AS = function() {
    return this.getToken(PythonParser.AS, 0);
};

Import_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterImport_as_name(this);
	}
};

Import_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitImport_as_name(this);
	}
};

Import_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitImport_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_as_nameContext = Import_as_nameContext;

PythonParser.prototype.import_as_name = function() {

    var localctx = new Import_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PythonParser.RULE_import_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.name();
        this.state = 583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 581;
            this.match(PythonParser.AS);
            this.state = 582;
            this.name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dotted_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_as_names;
    return this;
}

Dotted_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_namesContext.prototype.constructor = Dotted_as_namesContext;

Dotted_as_namesContext.prototype.dotted_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dotted_as_nameContext);
    } else {
        return this.getTypedRuleContext(Dotted_as_nameContext,i);
    }
};

Dotted_as_namesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


Dotted_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDotted_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_as_namesContext = Dotted_as_namesContext;

PythonParser.prototype.dotted_as_names = function() {

    var localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PythonParser.RULE_dotted_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this.dotted_as_name();
        this.state = 590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 586;
            this.match(PythonParser.COMMA);
            this.state = 587;
            this.dotted_as_name();
            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dotted_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_as_name;
    return this;
}

Dotted_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_nameContext.prototype.constructor = Dotted_as_nameContext;

Dotted_as_nameContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Dotted_as_nameContext.prototype.AS = function() {
    return this.getToken(PythonParser.AS, 0);
};

Dotted_as_nameContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Dotted_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDotted_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_as_nameContext = Dotted_as_nameContext;

PythonParser.prototype.dotted_as_name = function() {

    var localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PythonParser.RULE_dotted_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        this.dotted_name(0);
        this.state = 596;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 594;
            this.match(PythonParser.AS);
            this.state = 595;
            this.name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_test;
    return this;
}

TestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestContext.prototype.constructor = TestContext;

TestContext.prototype.logical_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Logical_testContext);
    } else {
        return this.getTypedRuleContext(Logical_testContext,i);
    }
};

TestContext.prototype.IF = function() {
    return this.getToken(PythonParser.IF, 0);
};

TestContext.prototype.ELSE = function() {
    return this.getToken(PythonParser.ELSE, 0);
};

TestContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

TestContext.prototype.LAMBDA = function() {
    return this.getToken(PythonParser.LAMBDA, 0);
};

TestContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

TestContext.prototype.varargslist = function() {
    return this.getTypedRuleContext(VarargslistContext,0);
};

TestContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterTest(this);
	}
};

TestContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitTest(this);
	}
};

TestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitTest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TestContext = TestContext;

PythonParser.prototype.test = function() {

    var localctx = new TestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PythonParser.RULE_test);
    var _la = 0; // Token type
    try {
        this.state = 612;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.NONE:
        case PythonParser.NOT:
        case PythonParser.AWAIT:
        case PythonParser.PRINT:
        case PythonParser.EXEC:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.ELLIPSIS:
        case PythonParser.REVERSE_QUOTE:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.STRING:
        case PythonParser.DECIMAL_INTEGER:
        case PythonParser.OCT_INTEGER:
        case PythonParser.HEX_INTEGER:
        case PythonParser.BIN_INTEGER:
        case PythonParser.IMAG_NUMBER:
        case PythonParser.FLOAT_NUMBER:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACE:
        case PythonParser.OPEN_BRACKET:
        case PythonParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 598;
            this.logical_test(0);
            this.state = 604;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
            if(la_===1) {
                this.state = 599;
                this.match(PythonParser.IF);
                this.state = 600;
                this.logical_test(0);
                this.state = 601;
                this.match(PythonParser.ELSE);
                this.state = 602;
                this.test();

            }
            break;
        case PythonParser.LAMBDA:
            this.enterOuterAlt(localctx, 2);
            this.state = 606;
            this.match(PythonParser.LAMBDA);
            this.state = 608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (PythonParser.TRUE - 39)) | (1 << (PythonParser.FALSE - 39)) | (1 << (PythonParser.STAR - 39)) | (1 << (PythonParser.POWER - 39)))) !== 0) || _la===PythonParser.NAME) {
                this.state = 607;
                this.varargslist();
            }

            this.state = 610;
            this.match(PythonParser.COLON);
            this.state = 611;
            this.test();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_varargslist;
    return this;
}

VarargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarargslistContext.prototype.constructor = VarargslistContext;

VarargslistContext.prototype.varargs = function() {
    return this.getTypedRuleContext(VarargsContext,0);
};

VarargslistContext.prototype.varkwargs = function() {
    return this.getTypedRuleContext(VarkwargsContext,0);
};

VarargslistContext.prototype.vardef_parameters = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Vardef_parametersContext);
    } else {
        return this.getTypedRuleContext(Vardef_parametersContext,i);
    }
};

VarargslistContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


VarargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterVarargslist(this);
	}
};

VarargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitVarargslist(this);
	}
};

VarargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitVarargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.VarargslistContext = VarargslistContext;

PythonParser.prototype.varargslist = function() {

    var localctx = new VarargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PythonParser.RULE_varargslist);
    var _la = 0; // Token type
    try {
        this.state = 638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 617;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
            if(la_===1) {
                this.state = 614;
                this.vardef_parameters();
                this.state = 615;
                this.match(PythonParser.COMMA);

            }
            this.state = 629;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.STAR:
                this.state = 619;
                this.varargs();
                this.state = 622;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
                if(la_===1) {
                    this.state = 620;
                    this.match(PythonParser.COMMA);
                    this.state = 621;
                    this.vardef_parameters();

                }
                this.state = 626;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
                if(la_===1) {
                    this.state = 624;
                    this.match(PythonParser.COMMA);
                    this.state = 625;
                    this.varkwargs();

                }
                break;
            case PythonParser.POWER:
                this.state = 628;
                this.varkwargs();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 631;
                this.match(PythonParser.COMMA);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 634;
            this.vardef_parameters();
            this.state = 636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 635;
                this.match(PythonParser.COMMA);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Vardef_parametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_vardef_parameters;
    return this;
}

Vardef_parametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vardef_parametersContext.prototype.constructor = Vardef_parametersContext;

Vardef_parametersContext.prototype.vardef_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Vardef_parameterContext);
    } else {
        return this.getTypedRuleContext(Vardef_parameterContext,i);
    }
};

Vardef_parametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


Vardef_parametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterVardef_parameters(this);
	}
};

Vardef_parametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitVardef_parameters(this);
	}
};

Vardef_parametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitVardef_parameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Vardef_parametersContext = Vardef_parametersContext;

PythonParser.prototype.vardef_parameters = function() {

    var localctx = new Vardef_parametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PythonParser.RULE_vardef_parameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.vardef_parameter();
        this.state = 645;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 641;
                this.match(PythonParser.COMMA);
                this.state = 642;
                this.vardef_parameter(); 
            }
            this.state = 647;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Vardef_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_vardef_parameter;
    return this;
}

Vardef_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vardef_parameterContext.prototype.constructor = Vardef_parameterContext;

Vardef_parameterContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Vardef_parameterContext.prototype.ASSIGN = function() {
    return this.getToken(PythonParser.ASSIGN, 0);
};

Vardef_parameterContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Vardef_parameterContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

Vardef_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterVardef_parameter(this);
	}
};

Vardef_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitVardef_parameter(this);
	}
};

Vardef_parameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitVardef_parameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Vardef_parameterContext = Vardef_parameterContext;

PythonParser.prototype.vardef_parameter = function() {

    var localctx = new Vardef_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PythonParser.RULE_vardef_parameter);
    var _la = 0; // Token type
    try {
        this.state = 654;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 648;
            this.name();
            this.state = 651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.ASSIGN) {
                this.state = 649;
                this.match(PythonParser.ASSIGN);
                this.state = 650;
                this.test();
            }

            break;
        case PythonParser.STAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 653;
            this.match(PythonParser.STAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarargsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_varargs;
    return this;
}

VarargsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarargsContext.prototype.constructor = VarargsContext;

VarargsContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

VarargsContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

VarargsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterVarargs(this);
	}
};

VarargsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitVarargs(this);
	}
};

VarargsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitVarargs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.VarargsContext = VarargsContext;

PythonParser.prototype.varargs = function() {

    var localctx = new VarargsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PythonParser.RULE_varargs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this.match(PythonParser.STAR);
        this.state = 657;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarkwargsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_varkwargs;
    return this;
}

VarkwargsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarkwargsContext.prototype.constructor = VarkwargsContext;

VarkwargsContext.prototype.POWER = function() {
    return this.getToken(PythonParser.POWER, 0);
};

VarkwargsContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

VarkwargsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterVarkwargs(this);
	}
};

VarkwargsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitVarkwargs(this);
	}
};

VarkwargsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitVarkwargs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.VarkwargsContext = VarkwargsContext;

PythonParser.prototype.varkwargs = function() {

    var localctx = new VarkwargsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PythonParser.RULE_varkwargs);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 659;
        this.match(PythonParser.POWER);
        this.state = 660;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Logical_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_logical_test;
    this.op = null; // Token
    return this;
}

Logical_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logical_testContext.prototype.constructor = Logical_testContext;

Logical_testContext.prototype.comparison = function() {
    return this.getTypedRuleContext(ComparisonContext,0);
};

Logical_testContext.prototype.NOT = function() {
    return this.getToken(PythonParser.NOT, 0);
};

Logical_testContext.prototype.logical_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Logical_testContext);
    } else {
        return this.getTypedRuleContext(Logical_testContext,i);
    }
};

Logical_testContext.prototype.AND = function() {
    return this.getToken(PythonParser.AND, 0);
};

Logical_testContext.prototype.OR = function() {
    return this.getToken(PythonParser.OR, 0);
};

Logical_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterLogical_test(this);
	}
};

Logical_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitLogical_test(this);
	}
};

Logical_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitLogical_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PythonParser.prototype.logical_test = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Logical_testContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, PythonParser.RULE_logical_test, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.NONE:
        case PythonParser.AWAIT:
        case PythonParser.PRINT:
        case PythonParser.EXEC:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.ELLIPSIS:
        case PythonParser.REVERSE_QUOTE:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.STRING:
        case PythonParser.DECIMAL_INTEGER:
        case PythonParser.OCT_INTEGER:
        case PythonParser.HEX_INTEGER:
        case PythonParser.BIN_INTEGER:
        case PythonParser.IMAG_NUMBER:
        case PythonParser.FLOAT_NUMBER:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACE:
        case PythonParser.OPEN_BRACKET:
        case PythonParser.NAME:
            this.state = 663;
            this.comparison(0);
            break;
        case PythonParser.NOT:
            this.state = 664;
            this.match(PythonParser.NOT);
            this.state = 665;
            this.logical_test(3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 676;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 674;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Logical_testContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_logical_test);
                    this.state = 668;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 669;
                    localctx.op = this.match(PythonParser.AND);
                    this.state = 670;
                    this.logical_test(3);
                    break;

                case 2:
                    localctx = new Logical_testContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_logical_test);
                    this.state = 671;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 672;
                    localctx.op = this.match(PythonParser.OR);
                    this.state = 673;
                    this.logical_test(2);
                    break;

                } 
            }
            this.state = 678;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comparison;
    this.optional = null; // Token
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

ComparisonContext.prototype.comparison = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComparisonContext);
    } else {
        return this.getTypedRuleContext(ComparisonContext,i);
    }
};

ComparisonContext.prototype.LESS_THAN = function() {
    return this.getToken(PythonParser.LESS_THAN, 0);
};

ComparisonContext.prototype.GREATER_THAN = function() {
    return this.getToken(PythonParser.GREATER_THAN, 0);
};

ComparisonContext.prototype.EQUALS = function() {
    return this.getToken(PythonParser.EQUALS, 0);
};

ComparisonContext.prototype.GT_EQ = function() {
    return this.getToken(PythonParser.GT_EQ, 0);
};

ComparisonContext.prototype.LT_EQ = function() {
    return this.getToken(PythonParser.LT_EQ, 0);
};

ComparisonContext.prototype.NOT_EQ_1 = function() {
    return this.getToken(PythonParser.NOT_EQ_1, 0);
};

ComparisonContext.prototype.NOT_EQ_2 = function() {
    return this.getToken(PythonParser.NOT_EQ_2, 0);
};

ComparisonContext.prototype.IN = function() {
    return this.getToken(PythonParser.IN, 0);
};

ComparisonContext.prototype.IS = function() {
    return this.getToken(PythonParser.IS, 0);
};

ComparisonContext.prototype.NOT = function() {
    return this.getToken(PythonParser.NOT, 0);
};

ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PythonParser.prototype.comparison = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ComparisonContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, PythonParser.RULE_comparison, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this.expr(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 703;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ComparisonContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_comparison);
                this.state = 682;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 698;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PythonParser.LESS_THAN:
                    this.state = 683;
                    this.match(PythonParser.LESS_THAN);
                    break;
                case PythonParser.GREATER_THAN:
                    this.state = 684;
                    this.match(PythonParser.GREATER_THAN);
                    break;
                case PythonParser.EQUALS:
                    this.state = 685;
                    this.match(PythonParser.EQUALS);
                    break;
                case PythonParser.GT_EQ:
                    this.state = 686;
                    this.match(PythonParser.GT_EQ);
                    break;
                case PythonParser.LT_EQ:
                    this.state = 687;
                    this.match(PythonParser.LT_EQ);
                    break;
                case PythonParser.NOT_EQ_1:
                    this.state = 688;
                    this.match(PythonParser.NOT_EQ_1);
                    break;
                case PythonParser.NOT_EQ_2:
                    this.state = 689;
                    this.match(PythonParser.NOT_EQ_2);
                    break;
                case PythonParser.IN:
                case PythonParser.NOT:
                    this.state = 691;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===PythonParser.NOT) {
                        this.state = 690;
                        localctx.optional = this.match(PythonParser.NOT);
                    }

                    this.state = 693;
                    this.match(PythonParser.IN);
                    break;
                case PythonParser.IS:
                    this.state = 694;
                    this.match(PythonParser.IS);
                    this.state = 696;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===PythonParser.NOT) {
                        this.state = 695;
                        localctx.optional = this.match(PythonParser.NOT);
                    }

                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 700;
                this.comparison(3); 
            }
            this.state = 705;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_expr;
    this.op = null; // Token
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

ExprContext.prototype.AWAIT = function() {
    return this.getToken(PythonParser.AWAIT, 0);
};

ExprContext.prototype.trailer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TrailerContext);
    } else {
        return this.getTypedRuleContext(TrailerContext,i);
    }
};

ExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprContext.prototype.ADD = function() {
    return this.getToken(PythonParser.ADD, 0);
};

ExprContext.prototype.MINUS = function() {
    return this.getToken(PythonParser.MINUS, 0);
};

ExprContext.prototype.NOT_OP = function() {
    return this.getToken(PythonParser.NOT_OP, 0);
};

ExprContext.prototype.POWER = function() {
    return this.getToken(PythonParser.POWER, 0);
};

ExprContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

ExprContext.prototype.DIV = function() {
    return this.getToken(PythonParser.DIV, 0);
};

ExprContext.prototype.MOD = function() {
    return this.getToken(PythonParser.MOD, 0);
};

ExprContext.prototype.IDIV = function() {
    return this.getToken(PythonParser.IDIV, 0);
};

ExprContext.prototype.AT = function() {
    return this.getToken(PythonParser.AT, 0);
};

ExprContext.prototype.LEFT_SHIFT = function() {
    return this.getToken(PythonParser.LEFT_SHIFT, 0);
};

ExprContext.prototype.RIGHT_SHIFT = function() {
    return this.getToken(PythonParser.RIGHT_SHIFT, 0);
};

ExprContext.prototype.AND_OP = function() {
    return this.getToken(PythonParser.AND_OP, 0);
};

ExprContext.prototype.XOR = function() {
    return this.getToken(PythonParser.XOR, 0);
};

ExprContext.prototype.OR_OP = function() {
    return this.getToken(PythonParser.OR_OP, 0);
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PythonParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, PythonParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.state = 708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.AWAIT) {
                this.state = 707;
                this.match(PythonParser.AWAIT);
            }

            this.state = 710;
            this.atom();
            this.state = 714;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 711;
                    this.trailer(); 
                }
                this.state = 716;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
            }

            break;

        case 2:
            this.state = 717;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (PythonParser.ADD - 55)) | (1 << (PythonParser.MINUS - 55)) | (1 << (PythonParser.NOT_OP - 55)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 718;
            this.expr(7);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 744;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,107,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 742;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_expr);
                    this.state = 721;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 722;
                    localctx.op = this.match(PythonParser.POWER);
                    this.state = 723;
                    this.expr(8);
                    break;

                case 2:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_expr);
                    this.state = 724;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 725;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PythonParser.STAR - 44)) | (1 << (PythonParser.DIV - 44)) | (1 << (PythonParser.MOD - 44)) | (1 << (PythonParser.IDIV - 44)) | (1 << (PythonParser.AT - 44)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 726;
                    this.expr(7);
                    break;

                case 3:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_expr);
                    this.state = 727;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 728;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===PythonParser.ADD || _la===PythonParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 729;
                    this.expr(6);
                    break;

                case 4:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_expr);
                    this.state = 730;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 731;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===PythonParser.LEFT_SHIFT || _la===PythonParser.RIGHT_SHIFT)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 732;
                    this.expr(5);
                    break;

                case 5:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_expr);
                    this.state = 733;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 734;
                    localctx.op = this.match(PythonParser.AND_OP);
                    this.state = 735;
                    this.expr(4);
                    break;

                case 6:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_expr);
                    this.state = 736;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 737;
                    localctx.op = this.match(PythonParser.XOR);
                    this.state = 738;
                    this.expr(3);
                    break;

                case 7:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_expr);
                    this.state = 739;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 740;
                    localctx.op = this.match(PythonParser.OR_OP);
                    this.state = 741;
                    this.expr(2);
                    break;

                } 
            }
            this.state = 746;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,107,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.OPEN_PAREN = function() {
    return this.getToken(PythonParser.OPEN_PAREN, 0);
};

AtomContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(PythonParser.CLOSE_PAREN, 0);
};

AtomContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

AtomContext.prototype.testlist_comp = function() {
    return this.getTypedRuleContext(Testlist_compContext,0);
};

AtomContext.prototype.OPEN_BRACKET = function() {
    return this.getToken(PythonParser.OPEN_BRACKET, 0);
};

AtomContext.prototype.CLOSE_BRACKET = function() {
    return this.getToken(PythonParser.CLOSE_BRACKET, 0);
};

AtomContext.prototype.OPEN_BRACE = function() {
    return this.getToken(PythonParser.OPEN_BRACE, 0);
};

AtomContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(PythonParser.CLOSE_BRACE, 0);
};

AtomContext.prototype.dictorsetmaker = function() {
    return this.getTypedRuleContext(DictorsetmakerContext,0);
};

AtomContext.prototype.REVERSE_QUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.REVERSE_QUOTE);
    } else {
        return this.getToken(PythonParser.REVERSE_QUOTE, i);
    }
};


AtomContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

AtomContext.prototype.COMMA = function() {
    return this.getToken(PythonParser.COMMA, 0);
};

AtomContext.prototype.ELLIPSIS = function() {
    return this.getToken(PythonParser.ELLIPSIS, 0);
};

AtomContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

AtomContext.prototype.PRINT = function() {
    return this.getToken(PythonParser.PRINT, 0);
};

AtomContext.prototype.EXEC = function() {
    return this.getToken(PythonParser.EXEC, 0);
};

AtomContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

AtomContext.prototype.MINUS = function() {
    return this.getToken(PythonParser.MINUS, 0);
};

AtomContext.prototype.NONE = function() {
    return this.getToken(PythonParser.NONE, 0);
};

AtomContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.STRING);
    } else {
        return this.getToken(PythonParser.STRING, i);
    }
};


AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitAtom(this);
	}
};

AtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.AtomContext = AtomContext;

PythonParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PythonParser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.state = 784;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.OPEN_PAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 747;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 750;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case PythonParser.YIELD:
            	this.state = 748;
            	this.yield_expr();
            	break;
            case PythonParser.NONE:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.AWAIT:
            case PythonParser.PRINT:
            case PythonParser.EXEC:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.ELLIPSIS:
            case PythonParser.REVERSE_QUOTE:
            case PythonParser.STAR:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.STRING:
            case PythonParser.DECIMAL_INTEGER:
            case PythonParser.OCT_INTEGER:
            case PythonParser.HEX_INTEGER:
            case PythonParser.BIN_INTEGER:
            case PythonParser.IMAG_NUMBER:
            case PythonParser.FLOAT_NUMBER:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACE:
            case PythonParser.OPEN_BRACKET:
            case PythonParser.NAME:
            	this.state = 749;
            	this.testlist_comp();
            	break;
            case PythonParser.CLOSE_PAREN:
            	break;
            default:
            	break;
            }
            this.state = 752;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 753;
            this.match(PythonParser.OPEN_BRACKET);
            this.state = 755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.STAR - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 754;
                this.testlist_comp();
            }

            this.state = 757;
            this.match(PythonParser.CLOSE_BRACKET);
            break;
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 758;
            this.match(PythonParser.OPEN_BRACE);
            this.state = 760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.STAR - 36)) | (1 << (PythonParser.POWER - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 759;
                this.dictorsetmaker();
            }

            this.state = 762;
            this.match(PythonParser.CLOSE_BRACE);
            break;
        case PythonParser.REVERSE_QUOTE:
            this.enterOuterAlt(localctx, 4);
            this.state = 763;
            this.match(PythonParser.REVERSE_QUOTE);
            this.state = 764;
            this.testlist();
            this.state = 766;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 765;
                this.match(PythonParser.COMMA);
            }

            this.state = 768;
            this.match(PythonParser.REVERSE_QUOTE);
            break;
        case PythonParser.ELLIPSIS:
            this.enterOuterAlt(localctx, 5);
            this.state = 770;
            this.match(PythonParser.ELLIPSIS);
            break;
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.NAME:
            this.enterOuterAlt(localctx, 6);
            this.state = 771;
            this.name();
            break;
        case PythonParser.PRINT:
            this.enterOuterAlt(localctx, 7);
            this.state = 772;
            this.match(PythonParser.PRINT);
            break;
        case PythonParser.EXEC:
            this.enterOuterAlt(localctx, 8);
            this.state = 773;
            this.match(PythonParser.EXEC);
            break;
        case PythonParser.MINUS:
        case PythonParser.DECIMAL_INTEGER:
        case PythonParser.OCT_INTEGER:
        case PythonParser.HEX_INTEGER:
        case PythonParser.BIN_INTEGER:
        case PythonParser.IMAG_NUMBER:
        case PythonParser.FLOAT_NUMBER:
            this.enterOuterAlt(localctx, 9);
            this.state = 775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.MINUS) {
                this.state = 774;
                this.match(PythonParser.MINUS);
            }

            this.state = 777;
            this.number();
            break;
        case PythonParser.NONE:
            this.enterOuterAlt(localctx, 10);
            this.state = 778;
            this.match(PythonParser.NONE);
            break;
        case PythonParser.STRING:
            this.enterOuterAlt(localctx, 11);
            this.state = 780; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 779;
            		this.match(PythonParser.STRING);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 782; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,113, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictorsetmakerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dictorsetmaker;
    return this;
}

DictorsetmakerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictorsetmakerContext.prototype.constructor = DictorsetmakerContext;

DictorsetmakerContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

DictorsetmakerContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COLON);
    } else {
        return this.getToken(PythonParser.COLON, i);
    }
};


DictorsetmakerContext.prototype.POWER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.POWER);
    } else {
        return this.getToken(PythonParser.POWER, i);
    }
};


DictorsetmakerContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DictorsetmakerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


DictorsetmakerContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

DictorsetmakerContext.prototype.testlist_comp = function() {
    return this.getTypedRuleContext(Testlist_compContext,0);
};

DictorsetmakerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDictorsetmaker(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DictorsetmakerContext = DictorsetmakerContext;

PythonParser.prototype.dictorsetmaker = function() {

    var localctx = new DictorsetmakerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PythonParser.RULE_dictorsetmaker);
    var _la = 0; // Token type
    try {
        this.state = 817;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 792;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PythonParser.NONE:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.AWAIT:
            case PythonParser.PRINT:
            case PythonParser.EXEC:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.ELLIPSIS:
            case PythonParser.REVERSE_QUOTE:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.STRING:
            case PythonParser.DECIMAL_INTEGER:
            case PythonParser.OCT_INTEGER:
            case PythonParser.HEX_INTEGER:
            case PythonParser.BIN_INTEGER:
            case PythonParser.IMAG_NUMBER:
            case PythonParser.FLOAT_NUMBER:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACE:
            case PythonParser.OPEN_BRACKET:
            case PythonParser.NAME:
                this.state = 786;
                this.test();
                this.state = 787;
                this.match(PythonParser.COLON);
                this.state = 788;
                this.test();
                break;
            case PythonParser.POWER:
                this.state = 790;
                this.match(PythonParser.POWER);
                this.state = 791;
                this.expr(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 805;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 794;
                    this.match(PythonParser.COMMA);
                    this.state = 801;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case PythonParser.NONE:
                    case PythonParser.LAMBDA:
                    case PythonParser.NOT:
                    case PythonParser.AWAIT:
                    case PythonParser.PRINT:
                    case PythonParser.EXEC:
                    case PythonParser.TRUE:
                    case PythonParser.FALSE:
                    case PythonParser.ELLIPSIS:
                    case PythonParser.REVERSE_QUOTE:
                    case PythonParser.ADD:
                    case PythonParser.MINUS:
                    case PythonParser.NOT_OP:
                    case PythonParser.STRING:
                    case PythonParser.DECIMAL_INTEGER:
                    case PythonParser.OCT_INTEGER:
                    case PythonParser.HEX_INTEGER:
                    case PythonParser.BIN_INTEGER:
                    case PythonParser.IMAG_NUMBER:
                    case PythonParser.FLOAT_NUMBER:
                    case PythonParser.OPEN_PAREN:
                    case PythonParser.OPEN_BRACE:
                    case PythonParser.OPEN_BRACKET:
                    case PythonParser.NAME:
                        this.state = 795;
                        this.test();
                        this.state = 796;
                        this.match(PythonParser.COLON);
                        this.state = 797;
                        this.test();
                        break;
                    case PythonParser.POWER:
                        this.state = 799;
                        this.match(PythonParser.POWER);
                        this.state = 800;
                        this.expr(0);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 807;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
            }

            this.state = 809;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 808;
                this.match(PythonParser.COMMA);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 811;
            this.test();
            this.state = 812;
            this.match(PythonParser.COLON);
            this.state = 813;
            this.test();
            this.state = 814;
            this.comp_for();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 816;
            this.testlist_comp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Testlist_compContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist_comp;
    return this;
}

Testlist_compContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_compContext.prototype.constructor = Testlist_compContext;

Testlist_compContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_compContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_compContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Testlist_compContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


Testlist_compContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterTestlist_comp(this);
	}
};

Testlist_compContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitTestlist_comp(this);
	}
};

Testlist_compContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitTestlist_comp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Testlist_compContext = Testlist_compContext;

PythonParser.prototype.testlist_comp = function() {

    var localctx = new Testlist_compContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PythonParser.RULE_testlist_comp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.NONE:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.AWAIT:
        case PythonParser.PRINT:
        case PythonParser.EXEC:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.ELLIPSIS:
        case PythonParser.REVERSE_QUOTE:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.STRING:
        case PythonParser.DECIMAL_INTEGER:
        case PythonParser.OCT_INTEGER:
        case PythonParser.HEX_INTEGER:
        case PythonParser.BIN_INTEGER:
        case PythonParser.IMAG_NUMBER:
        case PythonParser.FLOAT_NUMBER:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACE:
        case PythonParser.OPEN_BRACKET:
        case PythonParser.NAME:
            this.state = 819;
            this.test();
            break;
        case PythonParser.STAR:
            this.state = 820;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 837;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.FOR:
            this.state = 823;
            this.comp_for();
            break;
        case PythonParser.COMMA:
        case PythonParser.CLOSE_PAREN:
        case PythonParser.CLOSE_BRACE:
        case PythonParser.CLOSE_BRACKET:
            this.state = 831;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 824;
                    this.match(PythonParser.COMMA);
                    this.state = 827;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case PythonParser.NONE:
                    case PythonParser.LAMBDA:
                    case PythonParser.NOT:
                    case PythonParser.AWAIT:
                    case PythonParser.PRINT:
                    case PythonParser.EXEC:
                    case PythonParser.TRUE:
                    case PythonParser.FALSE:
                    case PythonParser.ELLIPSIS:
                    case PythonParser.REVERSE_QUOTE:
                    case PythonParser.ADD:
                    case PythonParser.MINUS:
                    case PythonParser.NOT_OP:
                    case PythonParser.STRING:
                    case PythonParser.DECIMAL_INTEGER:
                    case PythonParser.OCT_INTEGER:
                    case PythonParser.HEX_INTEGER:
                    case PythonParser.BIN_INTEGER:
                    case PythonParser.IMAG_NUMBER:
                    case PythonParser.FLOAT_NUMBER:
                    case PythonParser.OPEN_PAREN:
                    case PythonParser.OPEN_BRACE:
                    case PythonParser.OPEN_BRACKET:
                    case PythonParser.NAME:
                        this.state = 825;
                        this.test();
                        break;
                    case PythonParser.STAR:
                        this.state = 826;
                        this.star_expr();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 833;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
            }

            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 834;
                this.match(PythonParser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TestlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist;
    return this;
}

TestlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestlistContext.prototype.constructor = TestlistContext;

TestlistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

TestlistContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


TestlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterTestlist(this);
	}
};

TestlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitTestlist(this);
	}
};

TestlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitTestlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TestlistContext = TestlistContext;

PythonParser.prototype.testlist = function() {

    var localctx = new TestlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PythonParser.RULE_testlist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 839;
        this.test();
        this.state = 844;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 840;
                this.match(PythonParser.COMMA);
                this.state = 841;
                this.test(); 
            }
            this.state = 846;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
        }

        this.state = 848;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        if(la_===1) {
            this.state = 847;
            this.match(PythonParser.COMMA);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dotted_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_name;
    return this;
}

Dotted_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_nameContext.prototype.constructor = Dotted_nameContext;

Dotted_nameContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Dotted_nameContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Dotted_nameContext.prototype.DOT = function() {
    return this.getToken(PythonParser.DOT, 0);
};

Dotted_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterDotted_name(this);
	}
};

Dotted_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitDotted_name(this);
	}
};

Dotted_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitDotted_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PythonParser.prototype.dotted_name = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Dotted_nameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 88;
    this.enterRecursionRule(localctx, 88, PythonParser.RULE_dotted_name, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.name();
        this._ctx.stop = this._input.LT(-1);
        this.state = 858;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Dotted_nameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_dotted_name);
                this.state = 853;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 854;
                this.match(PythonParser.DOT);
                this.state = 855;
                this.name(); 
            }
            this.state = 860;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function NameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

NameContext.prototype.TRUE = function() {
    return this.getToken(PythonParser.TRUE, 0);
};

NameContext.prototype.FALSE = function() {
    return this.getToken(PythonParser.FALSE, 0);
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterName(this);
	}
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitName(this);
	}
};

NameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.NameContext = NameContext;

PythonParser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PythonParser.RULE_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 861;
        _la = this._input.LA(1);
        if(!(_la===PythonParser.TRUE || _la===PythonParser.FALSE || _la===PythonParser.NAME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

NumberContext.prototype.IMAG_NUMBER = function() {
    return this.getToken(PythonParser.IMAG_NUMBER, 0);
};

NumberContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(PythonParser.FLOAT_NUMBER, 0);
};

NumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterNumber(this);
	}
};

NumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitNumber(this);
	}
};

NumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.NumberContext = NumberContext;

PythonParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PythonParser.RULE_number);
    try {
        this.state = 866;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.DECIMAL_INTEGER:
        case PythonParser.OCT_INTEGER:
        case PythonParser.HEX_INTEGER:
        case PythonParser.BIN_INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 863;
            this.integer();
            break;
        case PythonParser.IMAG_NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 864;
            this.match(PythonParser.IMAG_NUMBER);
            break;
        case PythonParser.FLOAT_NUMBER:
            this.enterOuterAlt(localctx, 3);
            this.state = 865;
            this.match(PythonParser.FLOAT_NUMBER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_integer;
    return this;
}

IntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerContext.prototype.constructor = IntegerContext;

IntegerContext.prototype.DECIMAL_INTEGER = function() {
    return this.getToken(PythonParser.DECIMAL_INTEGER, 0);
};

IntegerContext.prototype.OCT_INTEGER = function() {
    return this.getToken(PythonParser.OCT_INTEGER, 0);
};

IntegerContext.prototype.HEX_INTEGER = function() {
    return this.getToken(PythonParser.HEX_INTEGER, 0);
};

IntegerContext.prototype.BIN_INTEGER = function() {
    return this.getToken(PythonParser.BIN_INTEGER, 0);
};

IntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterInteger(this);
	}
};

IntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitInteger(this);
	}
};

IntegerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitInteger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.IntegerContext = IntegerContext;

PythonParser.prototype.integer = function() {

    var localctx = new IntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PythonParser.RULE_integer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 868;
        _la = this._input.LA(1);
        if(!(((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (PythonParser.DECIMAL_INTEGER - 84)) | (1 << (PythonParser.OCT_INTEGER - 84)) | (1 << (PythonParser.HEX_INTEGER - 84)) | (1 << (PythonParser.BIN_INTEGER - 84)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Yield_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_expr;
    return this;
}

Yield_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_exprContext.prototype.constructor = Yield_exprContext;

Yield_exprContext.prototype.YIELD = function() {
    return this.getToken(PythonParser.YIELD, 0);
};

Yield_exprContext.prototype.yield_arg = function() {
    return this.getTypedRuleContext(Yield_argContext,0);
};

Yield_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterYield_expr(this);
	}
};

Yield_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitYield_expr(this);
	}
};

Yield_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitYield_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_exprContext = Yield_exprContext;

PythonParser.prototype.yield_expr = function() {

    var localctx = new Yield_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PythonParser.RULE_yield_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.match(PythonParser.YIELD);
        this.state = 872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.FROM) | (1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
            this.state = 871;
            this.yield_arg();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Yield_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_arg;
    return this;
}

Yield_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_argContext.prototype.constructor = Yield_argContext;

Yield_argContext.prototype.FROM = function() {
    return this.getToken(PythonParser.FROM, 0);
};

Yield_argContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Yield_argContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Yield_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterYield_arg(this);
	}
};

Yield_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitYield_arg(this);
	}
};

Yield_argContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitYield_arg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_argContext = Yield_argContext;

PythonParser.prototype.yield_arg = function() {

    var localctx = new Yield_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PythonParser.RULE_yield_arg);
    try {
        this.state = 877;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 874;
            this.match(PythonParser.FROM);
            this.state = 875;
            this.test();
            break;
        case PythonParser.NONE:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.AWAIT:
        case PythonParser.PRINT:
        case PythonParser.EXEC:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.ELLIPSIS:
        case PythonParser.REVERSE_QUOTE:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.STRING:
        case PythonParser.DECIMAL_INTEGER:
        case PythonParser.OCT_INTEGER:
        case PythonParser.HEX_INTEGER:
        case PythonParser.BIN_INTEGER:
        case PythonParser.IMAG_NUMBER:
        case PythonParser.FLOAT_NUMBER:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACE:
        case PythonParser.OPEN_BRACKET:
        case PythonParser.NAME:
            this.enterOuterAlt(localctx, 2);
            this.state = 876;
            this.testlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TrailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_trailer;
    return this;
}

TrailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailerContext.prototype.constructor = TrailerContext;

TrailerContext.prototype.DOT = function() {
    return this.getToken(PythonParser.DOT, 0);
};

TrailerContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

TrailerContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

TrailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterTrailer(this);
	}
};

TrailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitTrailer(this);
	}
};

TrailerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitTrailer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TrailerContext = TrailerContext;

PythonParser.prototype.trailer = function() {

    var localctx = new TrailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PythonParser.RULE_trailer);
    try {
        this.state = 885;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.DOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 879;
            this.match(PythonParser.DOT);
            this.state = 880;
            this.name();
            this.state = 882;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
            if(la_===1) {
                this.state = 881;
                this.arguments();

            }
            break;
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 884;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OPEN_PAREN = function() {
    return this.getToken(PythonParser.OPEN_PAREN, 0);
};

ArgumentsContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(PythonParser.CLOSE_PAREN, 0);
};

ArgumentsContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

ArgumentsContext.prototype.OPEN_BRACKET = function() {
    return this.getToken(PythonParser.OPEN_BRACKET, 0);
};

ArgumentsContext.prototype.subscriptlist = function() {
    return this.getTypedRuleContext(SubscriptlistContext,0);
};

ArgumentsContext.prototype.CLOSE_BRACKET = function() {
    return this.getToken(PythonParser.CLOSE_BRACKET, 0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitArguments(this);
	}
};

ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArgumentsContext = ArgumentsContext;

PythonParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PythonParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.state = 896;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.OPEN_PAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 887;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.STAR - 36)) | (1 << (PythonParser.POWER - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 888;
                this.arglist();
            }

            this.state = 891;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.OPEN_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 892;
            this.match(PythonParser.OPEN_BRACKET);
            this.state = 893;
            this.subscriptlist();
            this.state = 894;
            this.match(PythonParser.CLOSE_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArglistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_arglist;
    return this;
}

ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;

ArglistContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

ArglistContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


ArglistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterArglist(this);
	}
};

ArglistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitArglist(this);
	}
};

ArglistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitArglist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArglistContext = ArglistContext;

PythonParser.prototype.arglist = function() {

    var localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PythonParser.RULE_arglist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.argument();
        this.state = 903;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 899;
                this.match(PythonParser.COMMA);
                this.state = 900;
                this.argument(); 
            }
            this.state = 905;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
        }

        this.state = 907;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 906;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

ArgumentContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

ArgumentContext.prototype.ASSIGN = function() {
    return this.getToken(PythonParser.ASSIGN, 0);
};

ArgumentContext.prototype.POWER = function() {
    return this.getToken(PythonParser.POWER, 0);
};

ArgumentContext.prototype.STAR = function() {
    return this.getToken(PythonParser.STAR, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitArgument(this);
	}
};

ArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArgumentContext = ArgumentContext;

PythonParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PythonParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.state = 917;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.NONE:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.AWAIT:
        case PythonParser.PRINT:
        case PythonParser.EXEC:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.ELLIPSIS:
        case PythonParser.REVERSE_QUOTE:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.STRING:
        case PythonParser.DECIMAL_INTEGER:
        case PythonParser.OCT_INTEGER:
        case PythonParser.HEX_INTEGER:
        case PythonParser.BIN_INTEGER:
        case PythonParser.IMAG_NUMBER:
        case PythonParser.FLOAT_NUMBER:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACE:
        case PythonParser.OPEN_BRACKET:
        case PythonParser.NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 909;
            this.test();
            this.state = 913;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case PythonParser.FOR:
            	this.state = 910;
            	this.comp_for();
            	break;
            case PythonParser.ASSIGN:
            	this.state = 911;
            	this.match(PythonParser.ASSIGN);
            	this.state = 912;
            	this.test();
            	break;
            case PythonParser.COMMA:
            case PythonParser.CLOSE_PAREN:
            	break;
            default:
            	break;
            }
            break;
        case PythonParser.STAR:
        case PythonParser.POWER:
            this.enterOuterAlt(localctx, 2);
            this.state = 915;
            _la = this._input.LA(1);
            if(!(_la===PythonParser.STAR || _la===PythonParser.POWER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 916;
            this.test();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubscriptlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_subscriptlist;
    return this;
}

SubscriptlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptlistContext.prototype.constructor = SubscriptlistContext;

SubscriptlistContext.prototype.subscript = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubscriptContext);
    } else {
        return this.getTypedRuleContext(SubscriptContext,i);
    }
};

SubscriptlistContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.COMMA);
    } else {
        return this.getToken(PythonParser.COMMA, i);
    }
};


SubscriptlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitSubscriptlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SubscriptlistContext = SubscriptlistContext;

PythonParser.prototype.subscriptlist = function() {

    var localctx = new SubscriptlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PythonParser.RULE_subscriptlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        this.subscript();
        this.state = 924;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 920;
                this.match(PythonParser.COMMA);
                this.state = 921;
                this.subscript(); 
            }
            this.state = 926;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

        this.state = 928;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 927;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubscriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_subscript;
    return this;
}

SubscriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SubscriptContext.prototype.ELLIPSIS = function() {
    return this.getToken(PythonParser.ELLIPSIS, 0);
};

SubscriptContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

SubscriptContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

SubscriptContext.prototype.sliceop = function() {
    return this.getTypedRuleContext(SliceopContext,0);
};

SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SubscriptContext = SubscriptContext;

PythonParser.prototype.subscript = function() {

    var localctx = new SubscriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PythonParser.RULE_subscript);
    var _la = 0; // Token type
    try {
        this.state = 948;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 930;
            this.match(PythonParser.ELLIPSIS);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 931;
            this.test();
            this.state = 939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COLON) {
                this.state = 932;
                this.match(PythonParser.COLON);
                this.state = 934;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                    this.state = 933;
                    this.test();
                }

                this.state = 937;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PythonParser.COLON) {
                    this.state = 936;
                    this.sliceop();
                }

            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 941;
            this.match(PythonParser.COLON);
            this.state = 943;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
                this.state = 942;
                this.test();
            }

            this.state = 946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.COLON) {
                this.state = 945;
                this.sliceop();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SliceopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_sliceop;
    return this;
}

SliceopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceopContext.prototype.constructor = SliceopContext;

SliceopContext.prototype.COLON = function() {
    return this.getToken(PythonParser.COLON, 0);
};

SliceopContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

SliceopContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterSliceop(this);
	}
};

SliceopContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitSliceop(this);
	}
};

SliceopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitSliceop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SliceopContext = SliceopContext;

PythonParser.prototype.sliceop = function() {

    var localctx = new SliceopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PythonParser.RULE_sliceop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 950;
        this.match(PythonParser.COLON);
        this.state = 952;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.NONE) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (PythonParser.AWAIT - 36)) | (1 << (PythonParser.PRINT - 36)) | (1 << (PythonParser.EXEC - 36)) | (1 << (PythonParser.TRUE - 36)) | (1 << (PythonParser.FALSE - 36)) | (1 << (PythonParser.ELLIPSIS - 36)) | (1 << (PythonParser.REVERSE_QUOTE - 36)) | (1 << (PythonParser.ADD - 36)) | (1 << (PythonParser.MINUS - 36)) | (1 << (PythonParser.NOT_OP - 36)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.STRING - 83)) | (1 << (PythonParser.DECIMAL_INTEGER - 83)) | (1 << (PythonParser.OCT_INTEGER - 83)) | (1 << (PythonParser.HEX_INTEGER - 83)) | (1 << (PythonParser.BIN_INTEGER - 83)) | (1 << (PythonParser.IMAG_NUMBER - 83)) | (1 << (PythonParser.FLOAT_NUMBER - 83)) | (1 << (PythonParser.OPEN_PAREN - 83)) | (1 << (PythonParser.OPEN_BRACE - 83)) | (1 << (PythonParser.OPEN_BRACKET - 83)) | (1 << (PythonParser.NAME - 83)))) !== 0)) {
            this.state = 951;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comp_forContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_for;
    return this;
}

Comp_forContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_forContext.prototype.constructor = Comp_forContext;

Comp_forContext.prototype.FOR = function() {
    return this.getToken(PythonParser.FOR, 0);
};

Comp_forContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

Comp_forContext.prototype.IN = function() {
    return this.getToken(PythonParser.IN, 0);
};

Comp_forContext.prototype.logical_test = function() {
    return this.getTypedRuleContext(Logical_testContext,0);
};

Comp_forContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_forContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterComp_for(this);
	}
};

Comp_forContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitComp_for(this);
	}
};

Comp_forContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitComp_for(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_forContext = Comp_forContext;

PythonParser.prototype.comp_for = function() {

    var localctx = new Comp_forContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PythonParser.RULE_comp_for);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this.match(PythonParser.FOR);
        this.state = 955;
        this.exprlist();
        this.state = 956;
        this.match(PythonParser.IN);
        this.state = 957;
        this.logical_test(0);
        this.state = 959;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PythonParser.IF || _la===PythonParser.FOR) {
            this.state = 958;
            this.comp_iter();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Comp_iterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_iter;
    return this;
}

Comp_iterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_iterContext.prototype.constructor = Comp_iterContext;

Comp_iterContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Comp_iterContext.prototype.IF = function() {
    return this.getToken(PythonParser.IF, 0);
};

Comp_iterContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Comp_iterContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_iterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.enterComp_iter(this);
	}
};

Comp_iterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonParserListener ) {
        listener.exitComp_iter(this);
	}
};

Comp_iterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonParserVisitor ) {
        return visitor.visitComp_iter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_iterContext = Comp_iterContext;

PythonParser.prototype.comp_iter = function() {

    var localctx = new Comp_iterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PythonParser.RULE_comp_iter);
    var _la = 0; // Token type
    try {
        this.state = 967;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PythonParser.FOR:
            this.enterOuterAlt(localctx, 1);
            this.state = 961;
            this.comp_for();
            break;
        case PythonParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 962;
            this.match(PythonParser.IF);
            this.state = 963;
            this.test();
            this.state = 965;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PythonParser.IF || _la===PythonParser.FOR) {
                this.state = 964;
                this.comp_iter();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


PythonParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 12:
			return this.except_clause_sempred(localctx, predIndex);
	case 22:
			return this.small_stmt_sempred(localctx, predIndex);
	case 25:
			return this.assign_part_sempred(localctx, predIndex);
	case 37:
			return this.logical_test_sempred(localctx, predIndex);
	case 38:
			return this.comparison_sempred(localctx, predIndex);
	case 39:
			return this.expr_sempred(localctx, predIndex);
	case 44:
			return this.dotted_name_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

PythonParser.prototype.except_clause_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return CheckVersion(2);
		case 1:
			return CheckVersion(3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PythonParser.prototype.small_stmt_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return CheckVersion(2);
		case 3:
			return CheckVersion(2);
		case 4:
			return CheckVersion(3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PythonParser.prototype.assign_part_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return CheckVersion(3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PythonParser.prototype.logical_test_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PythonParser.prototype.comparison_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PythonParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 8);
		case 10:
			return this.precpred(this._ctx, 6);
		case 11:
			return this.precpred(this._ctx, 5);
		case 12:
			return this.precpred(this._ctx, 4);
		case 13:
			return this.precpred(this._ctx, 3);
		case 14:
			return this.precpred(this._ctx, 2);
		case 15:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PythonParser.prototype.dotted_name_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 16:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.PythonParser = PythonParser;
